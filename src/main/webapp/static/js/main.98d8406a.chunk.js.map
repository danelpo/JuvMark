{"version":3,"sources":["components/home/iframe/createClassIframeComponents/CreateNewCurriculum.jsx","components/home/iframe/createClassIframeComponents/LoadOldCurriculum.jsx","components/home/iframe/CreateClassIframe.jsx","components/home/iframe/CurrentClassIframe.jsx","components/home/iframe/PastClassIframe.jsx","components/home/HomeScreen.jsx","App.js","serviceWorker.js","index.js"],"names":["React","Component","LoadOldCurriculum","props","handleChange","selectedOption","setState","openOption","options","optionArray","state","allCurriculums","map","curriculumName","push","value","label","viewCurriculum","fetch","then","Respone","json","Message","curriculumExpectations","Curriculums","viewMode","Response","dropMenu","curriculumButtonDiv","viewIframe","this","className","onChange","id","onClick","StyleTop","document","getElementById","getBoundingClientRect","bottom","toString","console","log","A2","style","top","DataGrid","columns","key","name","rows","expectation","description","fontSize","classCode","width","alignContent","CreateClassIframe","startYear","endYear","semester","iframeWindow","classCodeValue","changeProps","startYearValue","endYearValue","semesterValue","iframeCurrentWindow","CurrentClassIframe","PastClassIframe","HomeScreen","iframeButtonControl","createClass_ClassCode","createClass_startYear","createClass_endYear","createClass_semester","home","buttonNumber","that","buttonList","body","getElementsByClassName","destinationXpoint","window","innerWidth","setInterval","myFrame","buttonIndex","length","button","x","clearInterval","left","alpha","getAlpha","getComputedStyle","backgroundColor","parseFloat","color","loadIframe","prop","string","split1","split2","split3","i","substring","iframeContent","bind","type","innerHeight","buttonClicked","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.98d8406a.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../iframeStyles.css';\r\n\r\nexport default class CreateNewCurriculum extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            returnedData: null,\r\n            serverMessage: null,\r\n        }\r\n    }\r\n\r\n    /*componentDidMount() {\r\n        //console.log(\"ALERT ERROR: CreateNewCurriculum, line 13: fetch only works on 8080, not 3000\");\r\n        //fetch('http://localhost:8080/data/hello').then(results => {return results}).then(data => {console.log(data); this.setState({returnedData: data});});\r\n    }\r\n\r\n    doFetchAndBuild = (nodeAPI) => {\r\n        fetch(nodeAPI)\r\n            .then(Response => {\r\n                     if (! Response.ok) {\r\n                         console.log(\"ERROR:  \" + Response)\r\n                     } else {\r\n                         console.log(\"Respone ok\");\r\n                        return Response.text();\r\n                     }\r\n             })\r\n            .then(message => {\r\n            \t//this.setState({lastJSON : message});\r\n                console.log(message);\r\n            })\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.doFetchAndBuild('/data/hello');\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.doFetchAndBuild('/data/hello');\r\n    }\r\n    */\r\n\r\n   componentDidMount() {\r\n       fetch('http://localhost:8080/data/hello').then(Response => {return Response.text()}).then(Message => {\r\n           console.log(Message);this.setState({serverMessage: Message});});\r\n   }\r\n   \r\n    render() {\r\n        let serverMessage = this.state.serverMessage;\r\n        console.log(serverMessage);\r\n        return(\r\n            <div className=\"iframeContent\">\r\n                <h1>Create Curriculum for: {this.props.classCode}</h1>\r\n                <h4>Message recieved from server: {serverMessage}</h4>\r\n                <h5>The message above is an example of React reciveing data from server</h5>\r\n                <h5>\"{serverMessage}\" has been set in the HelloWorldTest.java file, line 14</h5>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport '../iframeStyles.css';\r\nimport Select from 'react-select';\r\nimport DataGrid from 'react-data-grid';\r\nimport 'react-data-grid/dist/react-data-grid.css';\r\n\r\nexport default class LoadOldCurriculum extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            allCurriculums: null,\r\n            openOption: null,\r\n            viewMode:false,\r\n            curriculumExpectations: null,\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('http://localhost:8080/api/data/curriculum').then(Response => {return Response.json()}).then(Message => {\r\n            this.setState({allCurriculums: Message});});\r\n    }\r\n\r\n    handleChange = selectedOption => {\r\n        this.setState({openOption: selectedOption});\r\n    }\r\n\r\n    options = () => {\r\n        let optionArray = [];\r\n        this.state.allCurriculums.map(curriculumName => (\r\n            optionArray.push({value: curriculumName, label: curriculumName})));\r\n        return optionArray;\r\n    }\r\n\r\n    viewCurriculum = () => {\r\n        fetch('http://localhost:8080/api/data/curriculum/' + this.state.openOption.label).then(Respone => {return Respone.json()}).then(Message => {\r\n            this.setState({curriculumExpectations: Message.Curriculums});\r\n        });\r\n        this.setState({viewMode:true});\r\n    }\r\n\r\n    render() {\r\n        let dropMenu, curriculumButtonDiv, viewIframe = null;\r\n\r\n        if(this.state.allCurriculums) {\r\n            dropMenu = (<Select className=\"loadCurriculumDropDownMenu\" value={this.state.openOption} onChange={this.handleChange} options={this.options()}/>);\r\n            \r\n            if(this.state.openOption) {\r\n                curriculumButtonDiv = (<div className=\"textBoxDiv\" id=\"optionDropMenuDiv\">\r\n                    <button className=\"textBox oldCurriculumSelectOptionButton\" id=\"oldCurriculumSaveOption\">Save</button>\r\n                    <button className=\"textBox oldCurriculumSelectOptionButton\" id=\"oldCurriculumViewOption\" onClick={this.viewCurriculum}>View</button>\r\n                </div>);\r\n            }\r\n        }\r\n        \r\n        if(this.state.viewMode) {\r\n            let StyleTop = (document.getElementById(\"optionDropMenuDiv\").getBoundingClientRect().bottom + 20).toString() + \"px\";\r\n            const columns = [{ key: 'expectation', name: 'Expectation' },{ key: 'description', name: 'Description' }];\r\n            const rows = [{ expectation: 0, description: 'Example' },{ expectation: 1, description: 'Demo' }];\r\n            let rows2point0;\r\n            if(this.state.curriculumExpectations) {\r\n                console.log(this.state.curriculumExpectations.A2);\r\n                //this.state.curriculumExpectations.map(exp => (\r\n                //    rows2point0.push(exp)\r\n                //))\r\n            }\r\n            //console.log();\r\n            viewIframe = (\r\n                <div id=\"viewOldCurriculumIframe\" style={{top: StyleTop}}>\r\n                    <DataGrid columns={columns} rows={rows}/>\r\n                </div>\r\n            );\r\n        }\r\n        \r\n        return(\r\n            <div className=\"iframeContent\">\r\n                <h1 style={{fontSize: \"3vmin\"}}>Load Curriculum for: {this.props.classCode}</h1>\r\n                <div style={{width: \"100%\", alignContent: \"center\"}}>\r\n                    {dropMenu}\r\n                </div>\r\n                {curriculumButtonDiv}\r\n                {viewIframe}\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport './iframeStyles.css';\r\nimport CreateNewCurriculum from './createClassIframeComponents/CreateNewCurriculum.jsx';\r\nimport LoadOldCurriculum from './createClassIframeComponents/LoadOldCurriculum.jsx';\r\n\r\nexport default class CreateClassIframe extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            classCode: props.classCode,\r\n            startYear: props.startYear,\r\n            endYear: props.endYear,\r\n            semester: props.semester,\r\n            iframeWindow: 0,\r\n        }\r\n    }\r\n\r\n    apdateHomeValues() {\r\n        let classCodeValue = document.getElementById(\"classCodeBox\").value;\r\n        if(classCodeValue === \"\")\r\n            this.props.changeProps(\"classCode\", null);\r\n        else\r\n            this.props.changeProps(\"classCode\", classCodeValue);\r\n\r\n        let startYearValue = document.getElementById(\"startYearBox\").value;\r\n        if(startYearValue === \"\")\r\n            this.props.changeProps(\"startYear\", null);\r\n        else\r\n            this.props.changeProps(\"startYear\", startYearValue);\r\n\r\n        let endYearValue = document.getElementById(\"endYearBox\").value;\r\n        if(endYearValue === \"\")\r\n            this.props.changeProps(\"endYear\", null);\r\n        else\r\n            this.props.changeProps(\"endYear\", endYearValue);\r\n\r\n        let semesterValue = document.getElementById(\"semesterBox\").value;\r\n        if(semesterValue === \"\")\r\n            this.props.changeProps(\"semester\", null);\r\n        else\r\n            this.props.changeProps(\"semester\", semesterValue);\r\n    }\r\n\r\n    render() {\r\n        let classCodeInitValue;\r\n        if(this.state.classCode) {\r\n            classCodeInitValue = this.state.classCode;\r\n            this.setState({classCode: null});\r\n        }\r\n        let startYearInitValue;\r\n        if(this.state.startYear) {\r\n            startYearInitValue = this.state.startYear;\r\n            this.setState({startYear: null});\r\n        }\r\n\r\n        let endYearInitValue;\r\n        if(this.state.endYear) {\r\n            endYearInitValue = this.state.endYear;\r\n            this.setState({endYear: null});\r\n        }\r\n\r\n        let semesterInitValue;\r\n        if(this.state.semester) {\r\n            semesterInitValue = this.state.semester;\r\n            this.setState({semester: null});\r\n        }\r\n        let createClassHomeIframe = (\r\n            <div className=\"iframeContent\">\r\n                <h1>Create Class</h1>\r\n                <h4>Please enter class code in the following format:</h4>\r\n                <div className=\"textBoxDiv\" id=\"classCodeDiv\">\r\n                    <input type=\"text\" className=\"textBox\" id=\"classCodeBox\" placeholder=\"ICS4U-01\" value={classCodeInitValue}\r\n                    onChange={() => this.apdateHomeValues()}/>\r\n                </div>\r\n                <br/>\r\n                <h4>Please enter school year in the designated textboxes:</h4>\r\n                <div className=\"textBoxDiv\" id=\"yearDateDiv\">\r\n                    <input type=\"text\" className=\"textBox yearDateTextBox\" id=\"startYearBox\" placeholder=\"Start Year (2019)\"\r\n                    value={startYearInitValue} onChange={() => this.apdateHomeValues()} />\r\n                    \r\n                    <input type=\"text\" className=\"textBox yearDateTextBox\" id=\"endYearBox\" placeholder=\"End Year (2020)\"\r\n                    value={endYearInitValue} onChange={() => this.apdateHomeValues()} />\r\n                    \r\n                    <input type=\"text\" className=\"textBox yearDateTextBox\" id=\"semesterBox\" placeholder=\"Semester (1 or 2)\"\r\n                    value={semesterInitValue} onChange={() => this.apdateHomeValues()} />\r\n                </div>\r\n                <br/>\r\n                <h4>Please select a curriculum option:</h4>\r\n                <div className = \"buttonDiv\" id=\"curriculumButtonDiv\">\r\n                    <button className=\"textBox curriculumButton\" id=\"CreateCurriculumButton\"\r\n                    onClick={() => this.CreateCurriculum()}>Create Curriculum</button>\r\n                    \r\n                    <button className=\"textBox curriculumButton\" id=\"OldCurriculumButton\"\r\n                    onClick={() => this.LoadOldCurriculum()}>Use Old Curriculum</button>\r\n                </div>\r\n            </div>\r\n        );\r\n        let createCurriculumIframe = (\r\n                <CreateNewCurriculum classCode={this.props.classCode? this.props.classCode : \"Class Code Not Given\"}/>\r\n        );\r\n\r\n        let loadOldCurriculumIframe = (\r\n            <div className=\"iframeContent\">\r\n                <LoadOldCurriculum classCode={this.props.classCode? this.props.classCode : \"Class Code Not Given\"}/>\r\n            </div>\r\n        );\r\n        //NORMAL CODE\r\n        /*\r\n        let iframeCurrentWindow = createClassHomeIframe;\r\n        if(this.state.iframeWindow === 1)\r\n            iframeCurrentWindow = createCurriculumIframe;\r\n        else if(this.state.iframeWindow === 2)\r\n            iframeCurrentWindow = loadOldCurriculumIframe;\r\n        */\r\n        //TO SAVE TIME DURING DEV {\r\n        let iframeCurrentWindow = loadOldCurriculumIframe;\r\n        console.log(\"ALERT: REMOVE SHORTCUT AFTER DEV; CreateClassIframe.jsx; linex 108-118\");\r\n        return(\r\n            iframeCurrentWindow \r\n        )\r\n    }\r\n    /*\r\n    state.iframeWindow\r\n    0: main window\r\n    1: create curriculum\r\n    2: old curriculum\r\n    */\r\n    CreateCurriculum() {\r\n        this.setState({iframeWindow: 1});\r\n    }\r\n    LoadOldCurriculum() {\r\n        this.setState({iframeWindow: 2});\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nexport default class CurrentClassIframe extends React.Component {\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <h1>Current Classes</h1>\r\n                <h2>Feature not yet installed</h2>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nexport default class PastClassIframe extends React.Component {\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <h1>Past Classes</h1>\r\n                <h2>Feature not yet installed</h2>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport './homeScreenStyles.css';\r\nimport CreateClassIframe from './iframe/CreateClassIframe.jsx';\r\nimport CurrentClassIframe from './iframe/CurrentClassIframe.jsx';\r\nimport PastClassIframe from './iframe/PastClassIframe.jsx';\r\n\r\nexport default class HomeScreen extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            iframeButtonControl: null,\r\n            createClass_ClassCode: null,\r\n            createClass_startYear: null,\r\n            createClass_endYear: null,\r\n            createClass_semester: null,\r\n            home: this,\r\n        }\r\n    }\r\n\r\n    buttonClicked(buttonNumber) {\r\n        let that = this;\r\n        //moves buttons and loads iframe\r\n        let buttonList = document.body.getElementsByClassName(\"homeButton\");\r\n        const destinationXpoint = window.innerWidth / 10;\r\n        \r\n        var id = setInterval(frame, 5);\r\n        function frame() {\r\n            let myFrame = document.body.getElementsByClassName(\"mainIframe\")[0];\r\n            for (let buttonIndex = 0; buttonIndex < buttonList.length; buttonIndex++) {\r\n                let button = buttonList[buttonIndex];\r\n                /***MOVES BUTTONS LEFT***/\r\n                if(button.getBoundingClientRect().x < destinationXpoint) {\r\n                    clearInterval(id);\r\n                } else {\r\n                    button.style.left = (button.getBoundingClientRect().x - 3).toString() + \"px\";\r\n                }\r\n                /***FADE IN IFRAME***/\r\n                let alpha = that.getAlpha(getComputedStyle(document.body.getElementsByClassName(\"mainIframe\")[0]).backgroundColor);\r\n                if(alpha < 1) {\r\n                    myFrame.style.backgroundColor = \"rgba(245,245,245,\"+((parseFloat(alpha) + 0.005).toString())+\")\";\r\n                    myFrame.style.color = \"rgba(0,0,0,\"+((parseFloat(alpha) + 0.005).toString())+\")\";\r\n                }\r\n            }\r\n        }\r\n        //loads iframe depends on what button was pressed\r\n        this.loadIframe(buttonNumber);\r\n    }\r\n\r\n    changeProps(prop, value) {\r\n        if(prop === \"classCode\") {\r\n            this.setState({createClass_ClassCode: value});\r\n        } else if(prop === \"startYear\") {\r\n            this.setState({createClass_startYear: value});\r\n        } else if(prop === \"endYear\") {\r\n            this.setState({createClass_endYear: value});\r\n        } else if(prop === \"semester\") {\r\n            this.setState({createClass_semester: value});\r\n        }\r\n    }\r\n\r\n    getAlpha(string) {\r\n        let split1 = null;\r\n        let split2 = null;\r\n        let split3 = null;\r\n        for (let i = 0; i < string.length; i++) {\r\n           if (string.substring(i, i+1) === ',') {\r\n              if (split1 === null) {\r\n                 split1 = i;\r\n              } else if(split2 === null) {\r\n                 split2 = i;\r\n              } else {//slpit 3\r\n                 split3 = i;\r\n                 break;\r\n              }\r\n           }\r\n        }\r\n        if(split3 === null){//rgb instead of rgba\r\n           return 1;\r\n        }\r\n        let alpha = null;\r\n        for (let i = split3; i < string.length; i++) {\r\n           if(string.substring(i, i+1) === ')') {\r\n              alpha = string.substring(split3+2, i);\r\n              break;\r\n           }\r\n        }\r\n        return parseFloat(alpha);\r\n     }\r\n\r\n     loadIframe(buttonNumber) {\r\n        this.setState({iframeButtonControl: buttonNumber});\r\n     }\r\n\r\n    render() {\r\n        let iframeContent;\r\n        if(this.state.iframeButtonControl === 0) {\r\n            iframeContent = <CurrentClassIframe />\r\n        } else if (this.state.iframeButtonControl === 1) {\r\n            iframeContent = <CreateClassIframe\r\n                classCode={this.state.createClass_ClassCode}\r\n                startYear={this.state.createClass_startYear}\r\n                endYear={this.state.createClass_endYear}\r\n                semester={this.state.createClass_semester}\r\n                changeProps={this.changeProps.bind(this)}\r\n            />;\r\n        } else if (this.state.iframeButtonControl === 2) {\r\n            iframeContent = <PastClassIframe />;\r\n        }\r\n        \r\n        return (\r\n            <div>\r\n                <div className=\"mainIframe\">\r\n                    {iframeContent}\r\n                </div>\r\n                <input type=\"button\" className=\"homeButton\" value=\"Current Classes\"\r\n                style={{top: ((window.innerHeight / 4) - (window.innerHeight / 20)).toString() + \"px\"}}\r\n                onClick={() => this.buttonClicked(0)}/>\r\n                <input type=\"button\" className=\"homeButton\" value=\"Create Class\"\r\n                style={{top: ((window.innerHeight / 2) - (window.innerHeight / 20)).toString() + \"px\"}}\r\n                onClick={() => this.buttonClicked(1)}/>\r\n                <input type=\"button\" className=\"homeButton\" value=\"Past Classes\"\r\n                style={{top: ((window.innerHeight * 3/ 4) - (window.innerHeight / 20)).toString() + \"px\"}}\r\n                onClick={() => this.buttonClicked(2)}/>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport './App.css';\r\n//import {BrowserRouter as Router, Switch, Route, Link} from \"react-router-dom\";\r\nimport HomeScreen from './components/home/HomeScreen.jsx';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      {/*<p>hello darkness my old friend</p>\r\n      <Router>\r\n        <nav>\r\n          <ul>\r\n            <li>\r\n              <Link to=\"/about\">About</Link>\r\n            </li>\r\n          </ul>\r\n        </nav>\r\n        <Switch>\r\n          <Route path=\"/about\">\r\n            <HomeScreen />\r\n          </Route>\r\n        </Switch>\r\n      </Router>*/}\r\n      <HomeScreen />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}