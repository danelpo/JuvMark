{"version":3,"sources":["components/home/iframe/createClassIframeComponents/CreateNewTaskList.jsx","components/home/iframe/createClassIframeComponents/CreateNewCurriculum.jsx","components/home/iframe/createClassIframeComponents/TaskListOptionScreen.jsx","components/home/iframe/createClassIframeComponents/LoadOldCurriculum.jsx","components/home/iframe/createClassIframeComponents/CreateClassIframe.jsx","components/home/iframe/currentClassIframeComponents/CurrentClassIframe.jsx","components/home/iframe/pastClassIframeComponents/PastClassIframe.jsx","components/home/HomeScreen.jsx","App.js","serviceWorker.js","index.js"],"names":["CreateNewTaskList","props","closePopup","document","getElementById","remove","getTaskInfo","backgroundDiv","createElement","body","appendChild","className","id","addEventListener","popupDiv","popupDivHeader","innerHTML","bigDiv","taskNameDiv","taskExpcDiv","taskNameText","taskNameTextbox","type","placeholder","expectationText","expectationTextbox","descriptionText","descriptionTextbox","onkeypress","e","keyCode","preventDefault","saveButton","getUserTaskInfo","expectationsBox","nameBox","descriptionBox","value","newInput","state","rows","unshift","name","expectations","desc","setState","saveTaskList","alert","columns","key","taskListName","newCurriculum","curriculum","console","log","this","curriculumName","myNumber","getElementsByClassName","getBoundingClientRect","height","style","fontSize","onClick","DataGrid","React","Component","CreateNewCurriculum","courseCodeFromClassCode","classCode","i","length","substring","validateCurriculumName","curriculumPureName","defaultName","allCurriculums","allCurriculumsArray","allCurriculumsPureNames","purifyArray","includes","suggestedName","curriculumIndex","countHowManyInArray","indexCorrection","dirtyArray","pureArray","dirtyObject","cleanObject","underscoreIndex","j","push","getUserCurriculumInfo","expectationBox","expectation","saveCurriculum","axios","post","displayTaskList","array","object","frequency","fetch","then","Response","json","message","width","font","resize","Break1","Break2","Break3","Break4","display","pureCurriculumName","classDetails","code","start","end","getRowInfo","TaskListOptionScreen","handleChange","selectedOption","openOption","label","Respone","curriculumTaskListTasks","options","optionArray","curriculumTaskList","map","taskName","getRowsForTask","myRows","myRawRows","myLessRawButStillRawRows","myLessRawRows","task","taskNumber","TaskNumber","arrayToString","Curriculums","taskDesc","Description","myString","parseInt","cancelTaskView","bringToConfirmHomeScreen","newJsonObject","taskList","changeToConfirm","createNewTaskList","loadCreateNewTaskList","forceToCreate","currentCurriculum","curriculumObject","selectOldTaskListState","optionMenu","taskTable","optionButtons","onChange","disabled","selectOldTaskListFunction","LoadOldCurriculum","viewMode","viewCurriculum","Message","curriculumExpectations","taskWindow","dropMenu","curriculumButtonDiv","viewIframe","StyleTop","bottom","toString","cur","CurriculumNumber","description","top","projectedScreen","alignContent","CreateClassIframe","startYear","endYear","semester","iframeWindow","confirmScreen","classCodeValue","changeProps","startYearValue","endYearValue","semesterValue","apdateHomeValues","classCodeInitValue","startYearInitValue","endYearInitValue","semesterInitValue","bottomHalf","curriculumText","saveConfirm","cancelConfirm","CreateCurriculum","createClassHomeIframe","createCurriculumIframe","bind","loadOldCurriculumIframe","iframeCurrentWindow","arrayOfErrors","arrayOfLife","replace","CurrentClassIframe","PastClassIframe","HomeScreen","iframeButtonControl","createClass_ClassCode","createClass_startYear","createClass_endYear","createClass_semester","createClass_curriculum","createClass_taskList","home","buttonNumber","that","buttonList","destinationXpoint","window","innerWidth","setInterval","myFrame","buttonIndex","button","x","clearInterval","left","alpha","getAlpha","getComputedStyle","backgroundColor","parseFloat","color","loadIframe","prop","string","split1","split2","split3","iframeContent","button0State","button1State","button2State","innerHeight","buttonClicked","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","onkeyup","click"],"mappings":"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","file":"static/js/main.3c83b4ef.chunk.js","sourcesContent":["import React from 'react';\r\nimport DataGrid from 'react-data-grid';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport AddIcon from '@material-ui/icons/Add';\r\n\r\nexport default class CreateNewTaskList extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            rows: [{name: \"Q1\", expectations: \"A1, A2\", desc: \"lab safety quiz\"}, {name: \"T1\", expectations: \"A1, A2, A2.2, A3, A4\", desc: \"working in a lab test\"}],\r\n            columns: [{key: 'name', name: 'Task Name'},{key: 'expectations', name: 'Expectations'},{key: 'desc', name: 'Description'}],\r\n            taskListName: null,\r\n            newCurriculum: this.props.curriculum ? true : false,\r\n        }\r\n        console.log(\"new curriculum: \" + this.state.newCurriculum);\r\n    }\r\n\r\n    componentDidMount() {\r\n        const taskListName = this.props.curriculumName + \"_1\";\r\n        this.setState({taskListName});\r\n    }\r\n    closePopup = () => {\r\n        if(document.getElementById(\"createTaskListPopupBackground\")) {\r\n            document.getElementById(\"createTaskListPopupBackground\").remove();\r\n            document.getElementById(\"createTaskListPopupContent\").remove();\r\n        }\r\n    }\r\n\r\n    getTaskInfo = () => {\r\n        let backgroundDiv = document.createElement(\"div\");\r\n        document.body.appendChild(backgroundDiv);\r\n        backgroundDiv.className = \"popupBackgroundDiv\";\r\n        backgroundDiv.id = \"createTaskListPopupBackground\";\r\n        backgroundDiv.addEventListener('click', this.closePopup);\r\n\r\n        let popupDiv = document.createElement(\"div\");\r\n        document.body.appendChild(popupDiv);\r\n        popupDiv.className = \"popupItself\";\r\n        popupDiv.id = \"createTaskListPopupContent\";\r\n\r\n        let popupDivHeader = document.createElement(\"h1\");\r\n        popupDiv.appendChild(popupDivHeader);\r\n        popupDivHeader.innerHTML = \"Please enter the information below\";\r\n\r\n        let bigDiv = document.createElement(\"div\");\r\n        popupDiv.appendChild(bigDiv);\r\n        bigDiv.id = \"bigDiv\";\r\n\r\n        let taskNameDiv = document.createElement(\"div\");\r\n        bigDiv.appendChild(taskNameDiv);\r\n        taskNameDiv.id = \"taskNameDivInCreateTaskList\";\r\n        taskNameDiv.className = \"frameDivsInCreateTaskListPopup\";\r\n\r\n        let taskExpcDiv = document.createElement(\"div\");\r\n        bigDiv.appendChild(taskExpcDiv);\r\n        taskExpcDiv.id = \"taskExpectationDivInCreateTaskList\";\r\n        taskExpcDiv.className = \"frameDivsInCreateTaskListPopup\";\r\n\r\n        let taskNameText = document.createElement(\"h3\");\r\n        taskNameDiv.appendChild(taskNameText);\r\n        taskNameText.innerHTML = \"Please enter the task name:\";\r\n\r\n        let taskNameTextbox = document.createElement(\"input\");\r\n        taskNameTextbox.type = \"text\"\r\n        taskNameDiv.appendChild(taskNameTextbox);\r\n        taskNameTextbox.placeholder = \"T1/Q1\";\r\n        taskNameTextbox.className = \"createTaskListPopupTextBox\";\r\n        taskNameTextbox.id = \"taskNameTextBoxInCreateTaskList\";\r\n\r\n        let expectationText = document.createElement(\"h3\");\r\n        taskExpcDiv.appendChild(expectationText);\r\n        expectationText.innerHTML = \"Please enter the expectations:\";\r\n\r\n        let expectationTextbox = document.createElement(\"input\");\r\n        expectationTextbox.type = \"text\"\r\n        taskExpcDiv.appendChild(expectationTextbox);\r\n        expectationTextbox.placeholder = \"A1, A2, A3\";\r\n        expectationTextbox.className = \"createTaskListPopupTextBox\";\r\n        expectationTextbox.id = \"taskExpectationsTextBoxInCreateTaskList\";\r\n\r\n        let descriptionText = document.createElement(\"h3\");\r\n        popupDiv.appendChild(descriptionText);\r\n        descriptionText.innerHTML = \"Please enter the description:\";\r\n\r\n        let descriptionTextbox = document.createElement(\"textarea\");\r\n        popupDiv.appendChild(descriptionTextbox);\r\n        descriptionTextbox.placeholder = \"description\";\r\n        descriptionTextbox.className = \"textBox\";\r\n        descriptionTextbox.id = \"descriptionTextboxInCreateTaskList\";\r\n        descriptionTextbox.onkeypress = e => {\r\n            if(e.keyCode === 13)\r\n                e.preventDefault();\r\n        }//cancels Enter from registering\r\n\r\n        let saveButton = document.createElement(\"button\");\r\n        popupDiv.appendChild(saveButton);\r\n        saveButton.className=\"textBox\";\r\n        saveButton.innerHTML = \"save\";\r\n        saveButton.id = \"saveUserInputInCreateTaskListButton\";\r\n        saveButton.addEventListener('click', this.getUserTaskInfo)\r\n    }\r\n\r\n    getUserTaskInfo = () => {\r\n        let expectationsBox = document.getElementById(\"taskExpectationsTextBoxInCreateTaskList\");\r\n        let nameBox = document.getElementById(\"taskNameTextBoxInCreateTaskList\");\r\n        let descriptionBox = document.getElementById(\"descriptionTextboxInCreateTaskList\");\r\n        if(expectationsBox.value && descriptionBox.value && nameBox.value) {\r\n            let newInput = this.state.rows;\r\n            newInput.unshift({name: nameBox.value, expectations: expectationsBox.value, desc: descriptionBox.value});\r\n            this.setState({rows: newInput});\r\n            this.closePopup();\r\n        }\r\n    }\r\n\r\n    saveTaskList = () => {\r\n        alert(\"SAVED\");\r\n    }\r\n    \r\n    render() {\r\n        let myNumber;\r\n        if(document.body.getElementsByClassName(\"iframeContent\")) {\r\n            myNumber = document.body.getElementsByClassName(\"iframeContent\")[0].getBoundingClientRect().height * 0.75;\r\n        }\r\n\r\n        return(\r\n            <div className=\"iframeContent\">\r\n                <h2>Creating Task List: {this.state.taskListName}</h2>\r\n                <h3>With curriculum: {this.props.curriculumName}</h3>\r\n                <SaveIcon className=\"saveButtonForCreateCurriculum\" style={{fontSize: 40}} onClick={() => {this.saveTaskList(this)}}/>\r\n                <DataGrid columns={this.state.columns} rows={this.state.rows} height={myNumber}/>\r\n                <AddIcon style={{fontSize: 80}} onClick={() => {this.getTaskInfo(this)}}/>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport '../iframeStyles.css';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport DataGrid from 'react-data-grid';\r\nimport CreateNewTaskList from './CreateNewTaskList.jsx';\r\nimport axios from 'axios';\r\n\r\nexport default class CreateNewCurriculum extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            allCurriculumsArray: null,\r\n            curriculumName: null,\r\n            columns: [{key: 'expectation', name: 'Expectation'},{key: 'desc', name: 'Description'}],\r\n            rows: [{expectation: \"A3\", desc:\"This is the A3 curriculum\"},{expectation: \"A2\", desc:\"This is the A2 curriculum\"},{expectation: \"A1\", desc:\"This is the A1 curriculum\"}],\r\n            displayTaskList: false,\r\n        }\r\n    }\r\n    \r\n    courseCodeFromClassCode = classCode => {\r\n        if (!classCode) return;\r\n        for(let i = 0; i < classCode.length; i++) {\r\n            if(classCode.substring(i, i+1) === '-') {\r\n                return classCode.substring(0, i);\r\n            }\r\n        }\r\n        return classCode;\r\n    }\r\n\r\n    validateCurriculumName = curriculumPureName => {\r\n        const defaultName = curriculumPureName + \"_1\";\r\n        const allCurriculums = this.state.allCurriculumsArray;\r\n        const allCurriculumsPureNames = this.purifyArray(allCurriculums);\r\n        if (allCurriculumsPureNames.includes(curriculumPureName)) {\r\n            const curriculumIndex = this.countHowManyInArray(allCurriculumsPureNames, curriculumPureName);\r\n            let indexCorrection = 0;\r\n            let suggestedName;\r\n            do {\r\n                indexCorrection++;\r\n                let index = curriculumIndex + indexCorrection;\r\n                suggestedName = curriculumPureName + \"_\" + index;\r\n            } while (allCurriculums.includes(suggestedName));\r\n            return suggestedName;\r\n        }\r\n        return defaultName;\r\n    }\r\n\r\n    countHowManyInArray(array, object) {\r\n        let frequency = 0;\r\n        for (let i = 0; i < array.length; i++) {\r\n            if(array[i] === object) {\r\n                frequency++;\r\n            }\r\n        }\r\n        return frequency;\r\n    }\r\n\r\n    purifyArray = dirtyArray => {\r\n        let pureArray = [];\r\n        for (let i = 0; i < dirtyArray.length; i++) {\r\n            let dirtyObject = dirtyArray[i];\r\n            let cleanObject = null;\r\n            let underscoreIndex = 0;\r\n            for (let j = 0; j < dirtyObject.length; j++) {\r\n                if(dirtyObject.substring(j, j+1) === \"_\") {\r\n                    underscoreIndex === 1 ? cleanObject = dirtyObject.substring(0, j) :  underscoreIndex++;\r\n                }\r\n            }\r\n            pureArray.push(cleanObject);\r\n        }\r\n        return pureArray;\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('http://localhost:8080/api/data/curriculum').then(Response => {return Response.json()}).then(message => {\r\n            this.setState({allCurriculumsArray: message})});\r\n    }\r\n\r\n    closePopup = () => {\r\n        if(document.getElementById(\"createCurriculumPopupBackground\")) {\r\n            document.getElementById(\"createCurriculumPopupBackground\").remove();\r\n            document.getElementById(\"createCurriculumPopupContent\").remove();\r\n        }\r\n    }\r\n\r\n    getRowInfo() {\r\n        let backgroundDiv = document.createElement(\"div\");\r\n        document.body.appendChild(backgroundDiv);\r\n        backgroundDiv.className = \"popupBackgroundDiv\";\r\n        backgroundDiv.id = \"createCurriculumPopupBackground\";\r\n        backgroundDiv.addEventListener('click', this.closePopup);\r\n        \r\n        let popupDiv = document.createElement(\"div\");\r\n        document.body.appendChild(popupDiv);\r\n        popupDiv.className = \"popupItself\";\r\n        popupDiv.id = \"createCurriculumPopupContent\"\r\n        \r\n        let popupDivHeader = document.createElement(\"h1\");\r\n        popupDiv.appendChild(popupDivHeader);\r\n        popupDivHeader.innerHTML = \"Please enter the information below\";\r\n\r\n        let expectationText = document.createElement(\"h3\");\r\n        popupDiv.appendChild(expectationText);\r\n        expectationText.innerHTML = \"Please enter the expectation:\";\r\n\r\n        let expectationTextbox = document.createElement(\"input\");\r\n        expectationTextbox.type = \"text\"\r\n        popupDiv.appendChild(expectationTextbox);\r\n        expectationTextbox.placeholder = \"A1\";\r\n        expectationTextbox.className = \"textBox\";\r\n        expectationTextbox.id = \"expectationTextboxInCreateCurriculum\";\r\n        expectationTextbox.style.height = \"7%\";\r\n\r\n        let descriptionText = document.createElement(\"h3\");\r\n        popupDiv.appendChild(descriptionText);\r\n        descriptionText.innerHTML = \"Please enter the description:\";\r\n\r\n        let descriptionTextbox = document.createElement(\"textarea\");\r\n        popupDiv.appendChild(descriptionTextbox);\r\n        descriptionTextbox.placeholder = \"description\";\r\n        descriptionTextbox.className = \"textBox\";\r\n        descriptionTextbox.id = \"descriptionTextboxInCreateCurriculum\";\r\n        descriptionTextbox.style.height = \"20%\";\r\n        descriptionTextbox.style.width = \"65%\";\r\n        descriptionTextbox.style.font = \"normal 2vmin ariel,serif\";\r\n        descriptionTextbox.style.resize = \"none\";\r\n        descriptionTextbox.onkeypress = e => {\r\n            if(e.keyCode === 13)\r\n                e.preventDefault();\r\n        }//cancels Enter from registering\r\n\r\n        let Break1 = document.createElement(\"br\");\r\n        popupDiv.appendChild(Break1);\r\n        let Break2 = document.createElement(\"br\");\r\n        popupDiv.appendChild(Break2);\r\n        let Break3 = document.createElement(\"br\");\r\n        popupDiv.appendChild(Break3);\r\n        let Break4 = document.createElement(\"br\");\r\n        popupDiv.appendChild(Break4);\r\n\r\n        let saveButton = document.createElement(\"button\");\r\n        popupDiv.appendChild(saveButton);\r\n        saveButton.className=\"textBox\";\r\n        saveButton.style.height = \"7%\";\r\n        saveButton.style.width = \"35%\";\r\n        saveButton.innerHTML = \"save\";\r\n        saveButton.style.display = \"inline\";\r\n        saveButton.id = \"saveUserInputInCreateCurriculumButton\";\r\n        saveButton.addEventListener('click', this.getUserCurriculumInfo)\r\n    }\r\n\r\n    getUserCurriculumInfo = () => {\r\n        let expectationBox = document.getElementById(\"expectationTextboxInCreateCurriculum\");\r\n        let descriptionBox = document.getElementById(\"descriptionTextboxInCreateCurriculum\");\r\n        if(expectationBox.value && descriptionBox.value) {\r\n            let newInput = this.state.rows;\r\n            newInput.unshift({expectation: expectationBox.value, desc: descriptionBox.value});\r\n            this.setState({rows: newInput});\r\n            this.closePopup();\r\n        }\r\n    }\r\n\r\n    saveCurriculum = () => {\r\n        if(this.state.rows.length > 0) {\r\n            axios.post(`http://localhost:8080/api/data/curriculum/newName/${this.state.curriculumName}`);\r\n            for(let i = 0; i < this.state.rows.length; i++) {\r\n                const curriculum = this.state.rows[i].expectation + \"_\" + this.state.rows[i].desc;\r\n                if(i === 0) {\r\n                    axios.post(`http://localhost:8080/api/data/curriculum/addCurriculum/${curriculum}/1`);\r\n                } else if(i === this.state.rows.length-1) {\r\n                    axios.post(`http://localhost:8080/api/data/curriculum/addCurriculum/${curriculum}/2`);\r\n                }else {\r\n                    axios.post(`http://localhost:8080/api/data/curriculum/addCurriculum/${curriculum}/0`);\r\n                }\r\n            }\r\n            this.setState({displayTaskList: true});\r\n        }\r\n    }\r\n\r\n    render() {\r\n        if(!this.state.curriculumName && this.state.allCurriculumsArray) {\r\n            let courseCode = this.courseCodeFromClassCode(this.props.classDetails.code);\r\n            let pureCurriculumName = courseCode + \"_\" + this.props.classDetails.start + \"-\" + this.props.classDetails.end;\r\n            let curriculumName = this.validateCurriculumName(pureCurriculumName);\r\n            this.setState({curriculumName}); \r\n        }\r\n\r\n        let myNumber;\r\n        if(document.body.getElementsByClassName(\"iframeContent\")) {\r\n            myNumber = document.body.getElementsByClassName(\"iframeContent\")[0].getBoundingClientRect().height * 0.75;\r\n        }\r\n        if(!this.state.displayTaskList) {\r\n            return(\r\n                <div className=\"iframeContent\">\r\n                    <h2>Creating Curriculum: {this.state.curriculumName}</h2>\r\n                    <SaveIcon className=\"saveButtonForCreateCurriculum\" style={{fontSize: 40}} onClick={() => {this.saveCurriculum(this)}}/>\r\n                    <DataGrid columns={this.state.columns} rows={this.state.rows} height={myNumber}/>\r\n                    <AddIcon style={{fontSize: 80}} onClick={() => {this.getRowInfo(this)}}/>\r\n                </div>\r\n            );\r\n        }\r\n        return(\r\n            <CreateNewTaskList curriculumName={this.state.curriculumName} curriculum={this.state.rows}/>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport DataGrid from 'react-data-grid';\r\nimport Select from 'react-select';\r\nimport '../iframeStyles.css';\r\nimport CreateNewTaskList from './CreateNewTaskList';\r\n\r\nexport default class TaskListOptionScreen extends React.Component {\r\n    //props loadOld if false: creating new, hide select old task list\r\n    //props currentCurriculum: the curriculum that we are selecting the tasks for.\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            forceToCreate: false,\r\n            curriculumName: this.props.currentCurriculum,\r\n            curriculumObject: null,\r\n            curriculumTaskList: [],\r\n            openOption: null,\r\n            curriculumTaskListTasks: null,\r\n            selectOldTaskListState: false,\r\n            loadCreateNewTaskList: false,\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('http://localhost:8080/api/data/curriculum/' + this.state.curriculumName).then(Response => {return Response.json()}).then(message => {\r\n            this.setState({curriculumObject: message})});\r\n        fetch('http://localhost:8080/api/data/curriculum/' + this.state.curriculumName + '/tasks').then(Response => {return Response.json()}).then(message => {\r\n            this.setState({curriculumTaskList: message})});\r\n    }\r\n\r\n    selectOldTaskListFunction() {\r\n        this.setState({selectOldTaskListState: true});\r\n    }\r\n\r\n    handleChange = selectedOption => {\r\n        this.setState({openOption: selectedOption});\r\n        fetch('http://localhost:8080/api/data/curriculum/' + this.state.curriculumName + '/tasks/' + selectedOption.label).then(Respone => {return Respone.json()}).then(message => {\r\n            this.setState({curriculumTaskListTasks: message})});\r\n\r\n    }\r\n\r\n    options = () => {\r\n        let optionArray = [];\r\n        this.state.curriculumTaskList.map(taskName => (optionArray.push({value: taskName, label: taskName})));\r\n        return optionArray;\r\n    }\r\n\r\n    getRowsForTask = () => {\r\n        let myRows = [];\r\n        if(this.state.curriculumTaskListTasks) {\r\n            let myRawRows = [];\r\n            for(let i in this.state.curriculumTaskListTasks) {\r\n                myRawRows.push([i, this.state.curriculumTaskListTasks[i]]);\r\n            }\r\n            let myLessRawButStillRawRows = myRawRows[0][1];\r\n            let myLessRawRows = [];\r\n            for(let i in myLessRawButStillRawRows) {\r\n                myLessRawRows.push(myLessRawButStillRawRows[i]);\r\n            }\r\n            myLessRawRows.map(task => (myRows.push({taskNumber: task.TaskNumber, expectations: this.arrayToString(task.Curriculums), taskDesc: task.Description})))\r\n        }\r\n        return myRows;\r\n    }\r\n    \r\n    arrayToString = array => {\r\n        let myString = \"\";\r\n        for(let i in array) {\r\n            myString = myString + array[i];\r\n            if(parseInt(i) + 1 !== array.length) {\r\n                myString = myString + \", \"; \r\n            }\r\n        }\r\n        return myString;\r\n    }\r\n\r\n    cancelTaskView = () => {\r\n        this.setState({openOption: null});\r\n    }\r\n\r\n    bringToConfirmHomeScreen = () => {\r\n        let newJsonObject = this.props.classDetails;\r\n        newJsonObject.taskList = this.state.openOption.label;\r\n        this.props.changeToConfirm(newJsonObject);\r\n    }\r\n\r\n    createNewTaskList = () => {\r\n        this.setState({loadCreateNewTaskList: true});\r\n    }\r\n\r\n    render() {\r\n        if(this.state.loadCreateNewTaskList === false) {\r\n            let optionMenu, taskTable, optionButtons = null;\r\n            if(this.state.selectOldTaskListState) {\r\n                optionMenu = (\r\n                    <Select className=\"loadCurriculumDropDownMenu\" value={this.state.openOption} onChange={this.handleChange} options={this.options()}/>\r\n                );\r\n                \r\n                if(this.state.openOption) {\r\n                    const columns = [{key: 'taskNumber', name: 'Task Number'},{key: 'expectations', name: 'Expectations in Curriculum'},{key: 'taskDesc', name: 'Task Description'}];\r\n                    let rows = this.getRowsForTask();\r\n                    taskTable = (\r\n                        <div className=\"selectOldTasksDiv\">\r\n                            <DataGrid columns={columns} rows={rows}/>\r\n                        </div>\r\n                    );\r\n\r\n                    optionButtons = (\r\n                        <div className=\"taskOptionsButtonDiv\">\r\n                                <button className=\"taskOptionButton\" id=\"saveTaskButton\" onClick={() => {this.bringToConfirmHomeScreen(this)}}>Save</button>\r\n                                <button className=\"taskOptionButton\" id=\"cancelTaskButton\" onClick={() => {this.cancelTaskView(this)}}>Cancel</button>\r\n                        </div>\r\n                    );\r\n\r\n                    document.getElementById(\"selectOldTaskButton\").disabled = true;\r\n                    document.getElementById(\"createNewTaskButton\").disabled = true;\r\n                } else {\r\n                    document.getElementById(\"selectOldTaskButton\").disabled = false;\r\n                    document.getElementById(\"createNewTaskButton\").disabled = false;\r\n                }\r\n            }\r\n        \r\n            return(\r\n                <div className=\"taskListMainScreen\">\r\n                            <h2>Please select an option for your tasks</h2>\r\n                            <h4>Tasks include all tests, quizzes, asignments and evaluations</h4>\r\n                            <br/>\r\n                            <div className=\"taskOptionsButtonDiv\">\r\n                                <button className=\"taskOptionButton\" id=\"selectOldTaskButton\" onClick={() => {this.selectOldTaskListFunction(this)}}>Select Old Task List</button>\r\n                                <button className=\"taskOptionButton\" id=\"createNewTaskButton\" onClick={() => {this.createNewTaskList(this)}}>Create New Task List</button>\r\n                            </div>\r\n                            <br/>\r\n                            {optionMenu}\r\n                            <br/>\r\n                            {taskTable}\r\n                            <br/>\r\n                            {optionButtons}\r\n                        </div>\r\n            );\r\n        }\r\n        return <CreateNewTaskList curriculumName={this.state.curriculumName}/>\r\n    }\r\n}","import React from 'react';\r\nimport '../iframeStyles.css';\r\nimport Select from 'react-select';\r\nimport DataGrid from 'react-data-grid';\r\nimport 'react-data-grid/dist/react-data-grid.css';\r\nimport TaskListOptionScreen from './TaskListOptionScreen.jsx';\r\n\r\nexport default class LoadOldCurriculum extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            allCurriculums: null,\r\n            openOption: null,\r\n            viewMode:false,\r\n            curriculumExpectations: null,\r\n            taskWindow: false,\r\n            classDetails: props.classDetails,\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('http://localhost:8080/api/data/curriculum').then(Response => {return Response.json()}).then(Message => {\r\n            this.setState({allCurriculums: Message});});\r\n    }\r\n\r\n    handleChange = selectedOption => {\r\n        this.setState({openOption: selectedOption, viewMode:false});\r\n    }\r\n\r\n    options = () => {\r\n        let optionArray = [];\r\n        this.state.allCurriculums.map(curriculumName => (\r\n            optionArray.push({value: curriculumName, label: curriculumName})));\r\n        return optionArray;\r\n    }\r\n\r\n    viewCurriculum = () => {\r\n        fetch('http://localhost:8080/api/data/curriculum/' + this.state.openOption.label).then(Respone => {return Respone.json()}).then(Message => {\r\n            this.setState({curriculumExpectations: Message.Curriculums});\r\n        });\r\n        this.setState({viewMode:true});\r\n    }\r\n\r\n    saveCurriculum = () => {\r\n        let newJsonObject = this.state.classDetails;\r\n        newJsonObject.curriculum = this.state.openOption.label;\r\n        this.setState({taskWindow:true, classDetails: newJsonObject});\r\n    }\r\n\r\n    render() {\r\n        let dropMenu, curriculumButtonDiv, viewIframe = null;\r\n\r\n        if(this.state.allCurriculums) {\r\n            dropMenu = (<Select className=\"loadCurriculumDropDownMenu\" value={this.state.openOption} onChange={this.handleChange} options={this.options()}/>);\r\n            \r\n            if(this.state.openOption) {\r\n                curriculumButtonDiv = (<div className=\"textBoxDiv\" id=\"optionDropMenuDiv\">\r\n                    <button className=\"textBox oldCurriculumSelectOptionButton\" id=\"oldCurriculumSaveOption\" onClick={this.saveCurriculum}>Save</button>\r\n                    <button className=\"textBox oldCurriculumSelectOptionButton\" id=\"oldCurriculumViewOption\" onClick={this.viewCurriculum}>View</button>\r\n                </div>);\r\n            }\r\n        }\r\n        \r\n        if(this.state.viewMode) {\r\n            let StyleTop = (document.getElementById(\"optionDropMenuDiv\").getBoundingClientRect().bottom + 20).toString() + \"px\";\r\n            const columns = [{ key: 'expectation', name: 'Expectation' },{ key: 'description', name: 'Description' }];\r\n            let rows = [];\r\n            if(this.state.curriculumExpectations) {\r\n                let curriculum = []\r\n                for(var i in this.state.curriculumExpectations)\r\n                    curriculum.push([i, this.state.curriculumExpectations[i]]);\r\n                curriculum.map(cur => (rows.push({expectation: cur[1].CurriculumNumber, description: cur[1].Description})));\r\n            }\r\n            viewIframe = (\r\n                <div id=\"viewOldCurriculumIframe\" style={{top: StyleTop}}>\r\n                    <DataGrid columns={columns} rows={rows}/>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        let projectedScreen = (\r\n            <div className=\"iframeContent\">\r\n                <h1 style={{fontSize: \"3vmin\"}}>Load Curriculum for: {this.props.classCode}</h1>\r\n                <div style={{width: \"100%\", alignContent: \"center\"}}>\r\n                    {dropMenu}\r\n                </div>\r\n                {curriculumButtonDiv}\r\n                {viewIframe}\r\n            </div>\r\n        );\r\n\r\n        if(this.state.taskWindow) {\r\n            projectedScreen = (\r\n                <TaskListOptionScreen currentCurriculum={this.state.openOption.label}\r\n                changeToConfirm={this.props.changeToConfirm} classDetails={this.state.classDetails}/>\r\n            );\r\n        }\r\n        return projectedScreen;\r\n    }\r\n}","import React from 'react';\r\nimport '../iframeStyles.css';\r\nimport CreateNewCurriculum from './CreateNewCurriculum.jsx';\r\nimport LoadOldCurriculum from './LoadOldCurriculum.jsx';\r\n\r\nexport default class CreateClassIframe extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            classCode: props.classCode,\r\n            startYear: props.startYear,\r\n            endYear: props.endYear,\r\n            semester: props.semester,\r\n            iframeWindow: 0,\r\n            confirmScreen: false,\r\n            classDetails: null,\r\n        }\r\n    }\r\n\r\n    apdateHomeValues() {\r\n        let classCodeValue = document.getElementById(\"classCodeBox\").value;\r\n        if(classCodeValue === \"\")\r\n            this.props.changeProps(\"classCode\", null);\r\n        else\r\n            this.props.changeProps(\"classCode\", classCodeValue);\r\n\r\n        let startYearValue = document.getElementById(\"startYearBox\").value;\r\n        if(startYearValue === \"\")\r\n            this.props.changeProps(\"startYear\", null);\r\n        else\r\n            this.props.changeProps(\"startYear\", startYearValue);\r\n\r\n        let endYearValue = document.getElementById(\"endYearBox\").value;\r\n        if(endYearValue === \"\")\r\n            this.props.changeProps(\"endYear\", null);\r\n        else\r\n            this.props.changeProps(\"endYear\", endYearValue);\r\n\r\n        let semesterValue = document.getElementById(\"semesterBox\").value;\r\n        if(semesterValue === \"\")\r\n            this.props.changeProps(\"semester\", null);\r\n        else\r\n            this.props.changeProps(\"semester\", semesterValue);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.apdateHomeValues();\r\n    }\r\n\r\n    render() {\r\n        \r\n        let classCodeInitValue = \"ICS4U-01\";\r\n        let startYearInitValue = \"2019\";\r\n        let endYearInitValue = \"2020\";\r\n        let semesterInitValue = \"2\";\r\n        \r\n        //let classCodeInitValue, startYearInitValue, endYearInitValue, semesterInitValue = null;\r\n\r\n        if(this.state.classCode) {\r\n            classCodeInitValue = this.state.classCode;\r\n            this.setState({classCode: null});\r\n        }\r\n        \r\n        if(this.state.startYear) {\r\n            startYearInitValue = this.state.startYear;\r\n            this.setState({startYear: null});\r\n        }\r\n\r\n        if(this.state.endYear) {\r\n            endYearInitValue = this.state.endYear;\r\n            this.setState({endYear: null});\r\n        }\r\n\r\n        if(this.state.semester) {\r\n            semesterInitValue = this.state.semester;\r\n            this.setState({semester: null});\r\n        }\r\n\r\n        let bottomHalf = null;\r\n        let curriculumText = (<h4>Please select a curriculum option:</h4>);\r\n        if(!this.state.confirmScreen) {\r\n            bottomHalf = (\r\n                    <div className = \"buttonDiv\" id=\"curriculumButtonDiv\">\r\n                        <button className=\"textBox curriculumButton\" id=\"CreateCurriculumButton\"\r\n                        onClick={() => this.CreateCurriculum()}>Create Curriculum</button>\r\n                        \r\n                        <button className=\"textBox curriculumButton\" id=\"OldCurriculumButton\"\r\n                        onClick={() => this.LoadOldCurriculum()}>Use Old Curriculum</button>\r\n                    </div>\r\n            );\r\n        } else {\r\n            curriculumText = (\r\n                <div>\r\n                    <h2>Curriculum Selected: {this.state.classDetails.curriculum}</h2>\r\n                    <h2>Task List Selected: {this.state.classDetails.taskList}</h2>\r\n                </div>\r\n            );\r\n            bottomHalf = (\r\n                <div className = \"buttonDiv\" id=\"curriculumButtonDiv\">\r\n                    <br/>\r\n                    <button className=\"textBox curriculumButton\" id=\"saveClassSettings\" onClick={() => {this.saveConfirm(this)}}>Save</button>\r\n                    <button className=\"textBox curriculumButton\" id=\"cancelClassSettings\" onClick={() => {this.cancelConfirm(this)}}>Cancel</button>\r\n                </div>\r\n        );\r\n        }\r\n\r\n        let createClassHomeIframe = (\r\n            <div className=\"iframeContent\">\r\n                <h1>Create Class</h1>\r\n                <h4>Please enter class code in the following format:</h4>\r\n                <div className=\"textBoxDiv\" id=\"classCodeDiv\">\r\n                    <input type=\"text\" className=\"textBox\" id=\"classCodeBox\" placeholder=\"ICS4U-01\" value={classCodeInitValue}\r\n                    onChange={() => this.apdateHomeValues()}/>\r\n                </div>\r\n                <br/>\r\n                <h4>Please enter school year in the designated textboxes:</h4>\r\n                <div className=\"textBoxDiv\" id=\"yearDateDiv\">\r\n                    <input type=\"text\" className=\"textBox yearDateTextBox\" id=\"startYearBox\" placeholder=\"Start Year (2019)\"\r\n                    value={startYearInitValue} onChange={() => this.apdateHomeValues()} />\r\n                    \r\n                    <input type=\"text\" className=\"textBox yearDateTextBox\" id=\"endYearBox\" placeholder=\"End Year (2020)\"\r\n                    value={endYearInitValue} onChange={() => this.apdateHomeValues()} />\r\n                    \r\n                    <input type=\"text\" className=\"textBox yearDateTextBox\" id=\"semesterBox\" placeholder=\"Semester (1 or 2)\"\r\n                    value={semesterInitValue} onChange={() => this.apdateHomeValues()} />\r\n                </div>\r\n                <br/>\r\n                <br/>\r\n                {curriculumText}\r\n                {bottomHalf}\r\n            </div>\r\n        );\r\n\r\n        const classDetails = {code: this.props.classCode, start: this.props.startYear, end: this.props.endYear, semester :this.props.semester};\r\n\r\n        let createCurriculumIframe = (\r\n                <CreateNewCurriculum classCode={this.props.classCode? this.props.classCode : \"Class Code Not Given\"}\r\n                changeToConfirm={this.changeToConfirm.bind(this)} classDetails={classDetails}/>\r\n        );\r\n\r\n        let loadOldCurriculumIframe = (\r\n            <div className=\"iframeContent\">\r\n                <LoadOldCurriculum classCode={this.props.classCode? this.props.classCode : \"Class Code Not Given\"}\r\n                changeToConfirm={this.changeToConfirm.bind(this)} classDetails={classDetails}/>\r\n            </div>\r\n        );\r\n        let iframeCurrentWindow = createClassHomeIframe;\r\n        if(this.state.iframeWindow === 1)\r\n            iframeCurrentWindow = createCurriculumIframe;\r\n        else if(this.state.iframeWindow === 2)\r\n            iframeCurrentWindow = loadOldCurriculumIframe;\r\n\r\n        return(\r\n            iframeCurrentWindow \r\n        )\r\n    }\r\n    /*\r\n    state.iframeWindow\r\n    0: main window\r\n    1: create curriculum\r\n    2: old curriculum\r\n    */\r\n    CreateCurriculum() {\r\n        let arrayOfErrors = [];\r\n        let arrayOfLife = [\r\n            document.getElementById(\"classCodeBox\"), document.getElementById(\"startYearBox\"),\r\n            document.getElementById(\"endYearBox\"), document.getElementById(\"semesterBox\")\r\n        ];\r\n\r\n        for (let i = 0; i < arrayOfLife.length; i++) {\r\n            if(arrayOfLife[i].value === null)\r\n                arrayOfErrors.push(arrayOfLife[i]);\r\n            else if(arrayOfLife[i].value.replace(/\\s/g, \"\") === \"\")\r\n                arrayOfErrors.push(arrayOfLife[i]);\r\n        }\r\n        if(arrayOfErrors.length !== 0) {\r\n            console.log(\"PLEASE FILL IN ALL INFORMATION\");\r\n        }\r\n        else\r\n            this.setState({iframeWindow: 1});\r\n    }\r\n\r\n    LoadOldCurriculum() {\r\n        this.setState({iframeWindow: 2});\r\n    }\r\n\r\n    changeToConfirm(classDetails) {\r\n        this.setState({iframeWindow: 0, confirmScreen: true, classDetails: classDetails, classCode: classDetails.code,\r\n            startYear: classDetails.start, endYear: classDetails.end, semester: classDetails.semester});\r\n    }\r\n\r\n    cancelConfirm() {\r\n        this.setState({confirmScreen: false});\r\n    }\r\n\r\n    saveConfirm() {\r\n        alert(\"SAVE NOT IMPLEMENTED YET\");\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nexport default class CurrentClassIframe extends React.Component {\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <h1>Current Classes</h1>\r\n                <h2>Feature not yet installed</h2>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nexport default class PastClassIframe extends React.Component {\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <h1>Past Classes</h1>\r\n                <h2>Feature not yet installed</h2>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport './homeScreenStyles.css';\r\nimport CreateClassIframe from './iframe/createClassIframeComponents/CreateClassIframe.jsx';\r\nimport CurrentClassIframe from './iframe/currentClassIframeComponents/CurrentClassIframe.jsx';\r\nimport PastClassIframe from './iframe/pastClassIframeComponents/PastClassIframe.jsx';\r\n//import Button from '@material-ui/core/Button';\r\n\r\nexport default class HomeScreen extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            iframeButtonControl: null,\r\n            createClass_ClassCode: null,\r\n            createClass_startYear: null,\r\n            createClass_endYear: null,\r\n            createClass_semester: null,\r\n            createClass_curriculum: null,\r\n            createClass_taskList: null,\r\n            home: this,\r\n        }\r\n    }\r\n\r\n    buttonClicked(buttonNumber) {\r\n        let that = this;\r\n        //moves buttons and loads iframe\r\n        let buttonList = document.body.getElementsByClassName(\"homeButton\");\r\n        const destinationXpoint = window.innerWidth / 10;\r\n        \r\n        var id = setInterval(frame, 5);\r\n        function frame() {\r\n            let myFrame = document.body.getElementsByClassName(\"mainIframe\")[0];\r\n            for (let buttonIndex = 0; buttonIndex < buttonList.length; buttonIndex++) {\r\n                let button = buttonList[buttonIndex];\r\n                /***MOVES BUTTONS LEFT***/\r\n                if(button.getBoundingClientRect().x < destinationXpoint) {\r\n                    clearInterval(id);\r\n                } else {\r\n                    button.style.left = (button.getBoundingClientRect().x - 3).toString() + \"px\";\r\n                }\r\n                /***FADE IN IFRAME***/\r\n                let alpha = that.getAlpha(getComputedStyle(document.body.getElementsByClassName(\"mainIframe\")[0]).backgroundColor);\r\n                if(alpha < 1) {\r\n                    myFrame.style.backgroundColor = \"rgba(245,245,245,\"+((parseFloat(alpha) + 0.005).toString())+\")\";\r\n                    myFrame.style.color = \"rgba(0,0,0,\"+((parseFloat(alpha) + 0.005).toString())+\")\";\r\n                }\r\n            }\r\n        }\r\n        //loads iframe depends on what button was pressed\r\n        this.loadIframe(buttonNumber);\r\n    }\r\n\r\n    changeProps(prop, value) {\r\n        if(prop === \"classCode\") {\r\n            this.setState({createClass_ClassCode: value});\r\n        } else if(prop === \"startYear\") {\r\n            this.setState({createClass_startYear: value});\r\n        } else if(prop === \"endYear\") {\r\n            this.setState({createClass_endYear: value});\r\n        } else if(prop === \"semester\") {\r\n            this.setState({createClass_semester: value});\r\n        }\r\n    }\r\n\r\n    getAlpha(string) {\r\n        let split1 = null;\r\n        let split2 = null;\r\n        let split3 = null;\r\n        for (let i = 0; i < string.length; i++) {\r\n           if (string.substring(i, i+1) === ',') {\r\n              if (split1 === null) {\r\n                 split1 = i;\r\n              } else if(split2 === null) {\r\n                 split2 = i;\r\n              } else {//slpit 3\r\n                 split3 = i;\r\n                 break;\r\n              }\r\n           }\r\n        }\r\n        if(split3 === null){//rgb instead of rgba\r\n           return 1;\r\n        }\r\n        let alpha = null;\r\n        for (let i = split3; i < string.length; i++) {\r\n           if(string.substring(i, i+1) === ')') {\r\n              alpha = string.substring(split3+2, i);\r\n              break;\r\n           }\r\n        }\r\n        return parseFloat(alpha);\r\n     }\r\n\r\n     loadIframe(buttonNumber) {\r\n        this.setState({iframeButtonControl: buttonNumber});\r\n     }\r\n\r\n    render() {\r\n        let button0State = this.state.iframeButtonControl === 0? \"homeButton boldButton\" : \"homeButton unboldenButton\";\r\n        let button1State = this.state.iframeButtonControl === 1? \"homeButton boldButton\" : \"homeButton unboldenButton\";\r\n        let button2State = this.state.iframeButtonControl === 2? \"homeButton boldButton\" : \"homeButton unboldenButton\";\r\n        let iframeContent;\r\n        if(this.state.iframeButtonControl === 0) {\r\n            iframeContent = <CurrentClassIframe />\r\n        } else if (this.state.iframeButtonControl === 1) {\r\n            iframeContent = <CreateClassIframe\r\n                classCode={this.state.createClass_ClassCode}\r\n                startYear={this.state.createClass_startYear}\r\n                endYear={this.state.createClass_endYear}\r\n                semester={this.state.createClass_semester}\r\n                changeProps={this.changeProps.bind(this)}\r\n            />;\r\n        } else if (this.state.iframeButtonControl === 2) {\r\n            iframeContent = <PastClassIframe />;\r\n        }\r\n        \r\n        return (\r\n            <div>\r\n                <div className=\"mainIframe\">\r\n                    {iframeContent}\r\n                </div>\r\n                <input type=\"button\" className={button0State} value=\"Current Classes\"\r\n                style={{top: ((window.innerHeight / 4) - (window.innerHeight / 20)).toString() + \"px\"}}\r\n                onClick={() => this.buttonClicked(0)}/>\r\n                <input type=\"button\" className={button1State} value=\"Create Class\"\r\n                style={{top: ((window.innerHeight / 2) - (window.innerHeight / 20)).toString() + \"px\"}}\r\n                onClick={() => this.buttonClicked(1)}/>\r\n                <input type=\"button\" className={button2State} value=\"Past Classes\"\r\n                style={{top: ((window.innerHeight * 3/ 4) - (window.innerHeight / 20)).toString() + \"px\"}}\r\n                onClick={() => this.buttonClicked(2)}/>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport './App.css';\r\n//import {BrowserRouter as Router, Switch, Route, Link} from \"react-router-dom\";\r\nimport HomeScreen from './components/home/HomeScreen.jsx';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      {/*<p>hello darkness my old friend</p>\r\n      <Router>\r\n        <nav>\r\n          <ul>\r\n            <li>\r\n              <Link to=\"/about\">About</Link>\r\n            </li>\r\n          </ul>\r\n        </nav>\r\n        <Switch>\r\n          <Route path=\"/about\">\r\n            <HomeScreen />\r\n          </Route>\r\n        </Switch>\r\n      </Router>*/}\r\n      <HomeScreen />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n\r\ndocument.onkeyup = e => {\r\n  //popup when creating a new curriculum\r\n  if(document.getElementById(\"createCurriculumPopupBackground\")) {\r\n    if(e.key === \"Escape\")\r\n      document.getElementById(\"createCurriculumPopupBackground\").click();\r\n    else if(e.key === \"Enter\")\r\n      document.getElementById(\"saveUserInputInCreateCurriculumButton\").click();\r\n  }\r\n\r\n  //popup when creating a new tasks list\r\n  if(document.getElementById(\"createTaskListPopupBackground\")) {\r\n    if(e.key === \"Escape\")\r\n      document.getElementById(\"createTaskListPopupBackground\").click();\r\n    else if(e.key === \"Enter\")\r\n      document.getElementById(\"saveUserInputInCreateTaskListButton\").click();\r\n  }\r\n}"],"sourceRoot":""}