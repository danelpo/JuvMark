{"version":3,"sources":["components/home/iframe/createClassIframeComponents/CreateNewCurriculum.jsx","components/home/iframe/createClassIframeComponents/TaskListOptionScreen.jsx","components/home/iframe/createClassIframeComponents/LoadOldCurriculum.jsx","components/home/iframe/CreateClassIframe.jsx","components/home/iframe/CurrentClassIframe.jsx","components/home/iframe/PastClassIframe.jsx","components/home/HomeScreen.jsx","App.js","serviceWorker.js","index.js"],"names":["CreateNewCurriculum","className","this","props","classCode","React","Component","TaskListOptionScreen","LoadOldCurriculum","handleChange","selectedOption","setState","openOption","viewMode","options","optionArray","state","allCurriculums","map","curriculumName","push","value","label","viewCurriculum","fetch","then","Respone","json","Message","curriculumExpectations","Curriculums","saveCurriculum","taskWindow","Response","dropMenu","curriculumButtonDiv","viewIframe","onChange","id","onClick","StyleTop","document","getElementById","getBoundingClientRect","bottom","toString","rows","curriculum","i","cur","expectation","CurriculumNumber","description","Description","style","top","DataGrid","columns","key","name","projectedScreen","fontSize","width","alignContent","CreateClassIframe","startYear","endYear","semester","iframeWindow","classCodeValue","changeProps","startYearValue","endYearValue","semesterValue","classCodeInitValue","startYearInitValue","endYearInitValue","semesterInitValue","createClassHomeIframe","type","placeholder","apdateHomeValues","CreateCurriculum","createCurriculumIframe","loadOldCurriculumIframe","iframeCurrentWindow","CurrentClassIframe","PastClassIframe","HomeScreen","iframeButtonControl","createClass_ClassCode","createClass_startYear","createClass_endYear","createClass_semester","home","buttonNumber","that","buttonList","body","getElementsByClassName","destinationXpoint","window","innerWidth","setInterval","myFrame","buttonIndex","length","button","x","clearInterval","left","alpha","getAlpha","getComputedStyle","backgroundColor","parseFloat","color","loadIframe","prop","string","split1","split2","split3","substring","iframeContent","bind","innerHeight","buttonClicked","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.30416fab.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../iframeStyles.css';\r\n\r\nexport default class CreateNewCurriculum extends React.Component {\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"iframeContent\">\r\n                <h1>Create Curriculum for: {this.props.classCode}</h1>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\n\r\nexport default class TaskListOptionScreen extends React.Component {\r\n    render() {\r\n        return(\r\n            <h1>In here</h1>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport '../iframeStyles.css';\r\nimport Select from 'react-select';\r\nimport DataGrid from 'react-data-grid';\r\nimport 'react-data-grid/dist/react-data-grid.css';\r\nimport TaskListOptionScreen from './TaskListOptionScreen.jsx';\r\n\r\nexport default class LoadOldCurriculum extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            allCurriculums: null,\r\n            openOption: null,\r\n            viewMode:false,\r\n            curriculumExpectations: null,\r\n            taskWindow: false,\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('http://localhost:8080/api/data/curriculum').then(Response => {return Response.json()}).then(Message => {\r\n            this.setState({allCurriculums: Message});});\r\n    }\r\n\r\n    handleChange = selectedOption => {\r\n        this.setState({openOption: selectedOption, viewMode:false});\r\n    }\r\n\r\n    options = () => {\r\n        let optionArray = [];\r\n        this.state.allCurriculums.map(curriculumName => (\r\n            optionArray.push({value: curriculumName, label: curriculumName})));\r\n        return optionArray;\r\n    }\r\n\r\n    viewCurriculum = () => {\r\n        fetch('http://localhost:8080/api/data/curriculum/' + this.state.openOption.label).then(Respone => {return Respone.json()}).then(Message => {\r\n            this.setState({curriculumExpectations: Message.Curriculums});\r\n        });\r\n        this.setState({viewMode:true});\r\n    }\r\n\r\n    saveCurriculum = () => {\r\n        this.setState({taskWindow:true});\r\n    }\r\n\r\n    render() {\r\n        let dropMenu, curriculumButtonDiv, viewIframe = null;\r\n\r\n        if(this.state.allCurriculums) {\r\n            dropMenu = (<Select className=\"loadCurriculumDropDownMenu\" value={this.state.openOption} onChange={this.handleChange} options={this.options()}/>);\r\n            \r\n            if(this.state.openOption) {\r\n                curriculumButtonDiv = (<div className=\"textBoxDiv\" id=\"optionDropMenuDiv\">\r\n                    <button className=\"textBox oldCurriculumSelectOptionButton\" id=\"oldCurriculumSaveOption\" onClick={this.saveCurriculum}>Save</button>\r\n                    <button className=\"textBox oldCurriculumSelectOptionButton\" id=\"oldCurriculumViewOption\" onClick={this.viewCurriculum}>View</button>\r\n                </div>);\r\n            }\r\n        }\r\n        \r\n        if(this.state.viewMode) {\r\n            let StyleTop = (document.getElementById(\"optionDropMenuDiv\").getBoundingClientRect().bottom + 20).toString() + \"px\";\r\n            const columns = [{ key: 'expectation', name: 'Expectation' },{ key: 'description', name: 'Description' }];\r\n            let rows = [];\r\n            if(this.state.curriculumExpectations) {\r\n                let curriculum = []\r\n                for(var i in this.state.curriculumExpectations)\r\n                    curriculum.push([i, this.state.curriculumExpectations [i]]);\r\n                curriculum.map(cur => (rows.push({expectation: cur[1].CurriculumNumber, description: cur[1].Description})));\r\n            }\r\n            viewIframe = (\r\n                <div id=\"viewOldCurriculumIframe\" style={{top: StyleTop}}>\r\n                    <DataGrid columns={columns} rows={rows}/>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        let projectedScreen = (\r\n            <div className=\"iframeContent\">\r\n                <h1 style={{fontSize: \"3vmin\"}}>Load Curriculum for: {this.props.classCode}</h1>\r\n                <div style={{width: \"100%\", alignContent: \"center\"}}>\r\n                    {dropMenu}\r\n                </div>\r\n                {curriculumButtonDiv}\r\n                {viewIframe}\r\n            </div>\r\n        );\r\n\r\n        if(this.state.taskWindow)\r\n        projectedScreen = (\r\n            <TaskListOptionScreen/>\r\n        );\r\n\r\n        return projectedScreen;\r\n    }\r\n}","import React from 'react';\r\nimport './iframeStyles.css';\r\nimport CreateNewCurriculum from './createClassIframeComponents/CreateNewCurriculum.jsx';\r\nimport LoadOldCurriculum from './createClassIframeComponents/LoadOldCurriculum.jsx';\r\n\r\nexport default class CreateClassIframe extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            classCode: props.classCode,\r\n            startYear: props.startYear,\r\n            endYear: props.endYear,\r\n            semester: props.semester,\r\n            iframeWindow: 0,\r\n        }\r\n    }\r\n\r\n    apdateHomeValues() {\r\n        let classCodeValue = document.getElementById(\"classCodeBox\").value;\r\n        if(classCodeValue === \"\")\r\n            this.props.changeProps(\"classCode\", null);\r\n        else\r\n            this.props.changeProps(\"classCode\", classCodeValue);\r\n\r\n        let startYearValue = document.getElementById(\"startYearBox\").value;\r\n        if(startYearValue === \"\")\r\n            this.props.changeProps(\"startYear\", null);\r\n        else\r\n            this.props.changeProps(\"startYear\", startYearValue);\r\n\r\n        let endYearValue = document.getElementById(\"endYearBox\").value;\r\n        if(endYearValue === \"\")\r\n            this.props.changeProps(\"endYear\", null);\r\n        else\r\n            this.props.changeProps(\"endYear\", endYearValue);\r\n\r\n        let semesterValue = document.getElementById(\"semesterBox\").value;\r\n        if(semesterValue === \"\")\r\n            this.props.changeProps(\"semester\", null);\r\n        else\r\n            this.props.changeProps(\"semester\", semesterValue);\r\n    }\r\n\r\n    render() {\r\n        let classCodeInitValue;\r\n        if(this.state.classCode) {\r\n            classCodeInitValue = this.state.classCode;\r\n            this.setState({classCode: null});\r\n        }\r\n        let startYearInitValue;\r\n        if(this.state.startYear) {\r\n            startYearInitValue = this.state.startYear;\r\n            this.setState({startYear: null});\r\n        }\r\n\r\n        let endYearInitValue;\r\n        if(this.state.endYear) {\r\n            endYearInitValue = this.state.endYear;\r\n            this.setState({endYear: null});\r\n        }\r\n\r\n        let semesterInitValue;\r\n        if(this.state.semester) {\r\n            semesterInitValue = this.state.semester;\r\n            this.setState({semester: null});\r\n        }\r\n        let createClassHomeIframe = (\r\n            <div className=\"iframeContent\">\r\n                <h1>Create Class</h1>\r\n                <h4>Please enter class code in the following format:</h4>\r\n                <div className=\"textBoxDiv\" id=\"classCodeDiv\">\r\n                    <input type=\"text\" className=\"textBox\" id=\"classCodeBox\" placeholder=\"ICS4U-01\" value={classCodeInitValue}\r\n                    onChange={() => this.apdateHomeValues()}/>\r\n                </div>\r\n                <br/>\r\n                <h4>Please enter school year in the designated textboxes:</h4>\r\n                <div className=\"textBoxDiv\" id=\"yearDateDiv\">\r\n                    <input type=\"text\" className=\"textBox yearDateTextBox\" id=\"startYearBox\" placeholder=\"Start Year (2019)\"\r\n                    value={startYearInitValue} onChange={() => this.apdateHomeValues()} />\r\n                    \r\n                    <input type=\"text\" className=\"textBox yearDateTextBox\" id=\"endYearBox\" placeholder=\"End Year (2020)\"\r\n                    value={endYearInitValue} onChange={() => this.apdateHomeValues()} />\r\n                    \r\n                    <input type=\"text\" className=\"textBox yearDateTextBox\" id=\"semesterBox\" placeholder=\"Semester (1 or 2)\"\r\n                    value={semesterInitValue} onChange={() => this.apdateHomeValues()} />\r\n                </div>\r\n                <br/>\r\n                <h4>Please select a curriculum option:</h4>\r\n                <div className = \"buttonDiv\" id=\"curriculumButtonDiv\">\r\n                    <button className=\"textBox curriculumButton\" id=\"CreateCurriculumButton\"\r\n                    onClick={() => this.CreateCurriculum()}>Create Curriculum</button>\r\n                    \r\n                    <button className=\"textBox curriculumButton\" id=\"OldCurriculumButton\"\r\n                    onClick={() => this.LoadOldCurriculum()}>Use Old Curriculum</button>\r\n                </div>\r\n            </div>\r\n        );\r\n        let createCurriculumIframe = (\r\n                <CreateNewCurriculum classCode={this.props.classCode? this.props.classCode : \"Class Code Not Given\"}/>\r\n        );\r\n\r\n        let loadOldCurriculumIframe = (\r\n            <div className=\"iframeContent\">\r\n                <LoadOldCurriculum classCode={this.props.classCode? this.props.classCode : \"Class Code Not Given\"}/>\r\n            </div>\r\n        );\r\n        let iframeCurrentWindow = createClassHomeIframe;\r\n        if(this.state.iframeWindow === 1)\r\n            iframeCurrentWindow = createCurriculumIframe;\r\n        else if(this.state.iframeWindow === 2)\r\n            iframeCurrentWindow = loadOldCurriculumIframe;\r\n        return(\r\n            iframeCurrentWindow \r\n        )\r\n    }\r\n    /*\r\n    state.iframeWindow\r\n    0: main window\r\n    1: create curriculum\r\n    2: old curriculum\r\n    */\r\n    CreateCurriculum() {\r\n        this.setState({iframeWindow: 1});\r\n    }\r\n    LoadOldCurriculum() {\r\n        this.setState({iframeWindow: 2});\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nexport default class CurrentClassIframe extends React.Component {\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <h1>Current Classes</h1>\r\n                <h2>Feature not yet installed</h2>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nexport default class PastClassIframe extends React.Component {\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <h1>Past Classes</h1>\r\n                <h2>Feature not yet installed</h2>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport './homeScreenStyles.css';\r\nimport CreateClassIframe from './iframe/CreateClassIframe.jsx';\r\nimport CurrentClassIframe from './iframe/CurrentClassIframe.jsx';\r\nimport PastClassIframe from './iframe/PastClassIframe.jsx';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nexport default class HomeScreen extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            iframeButtonControl: null,\r\n            createClass_ClassCode: null,\r\n            createClass_startYear: null,\r\n            createClass_endYear: null,\r\n            createClass_semester: null,\r\n            home: this,\r\n        }\r\n    }\r\n\r\n    buttonClicked(buttonNumber) {\r\n        let that = this;\r\n        //moves buttons and loads iframe\r\n        let buttonList = document.body.getElementsByClassName(\"homeButton\");\r\n        const destinationXpoint = window.innerWidth / 10;\r\n        \r\n        var id = setInterval(frame, 5);\r\n        function frame() {\r\n            let myFrame = document.body.getElementsByClassName(\"mainIframe\")[0];\r\n            for (let buttonIndex = 0; buttonIndex < buttonList.length; buttonIndex++) {\r\n                let button = buttonList[buttonIndex];\r\n                /***MOVES BUTTONS LEFT***/\r\n                if(button.getBoundingClientRect().x < destinationXpoint) {\r\n                    clearInterval(id);\r\n                } else {\r\n                    button.style.left = (button.getBoundingClientRect().x - 3).toString() + \"px\";\r\n                }\r\n                /***FADE IN IFRAME***/\r\n                let alpha = that.getAlpha(getComputedStyle(document.body.getElementsByClassName(\"mainIframe\")[0]).backgroundColor);\r\n                if(alpha < 1) {\r\n                    myFrame.style.backgroundColor = \"rgba(245,245,245,\"+((parseFloat(alpha) + 0.005).toString())+\")\";\r\n                    myFrame.style.color = \"rgba(0,0,0,\"+((parseFloat(alpha) + 0.005).toString())+\")\";\r\n                }\r\n            }\r\n        }\r\n        //loads iframe depends on what button was pressed\r\n        this.loadIframe(buttonNumber);\r\n    }\r\n\r\n    changeProps(prop, value) {\r\n        if(prop === \"classCode\") {\r\n            this.setState({createClass_ClassCode: value});\r\n        } else if(prop === \"startYear\") {\r\n            this.setState({createClass_startYear: value});\r\n        } else if(prop === \"endYear\") {\r\n            this.setState({createClass_endYear: value});\r\n        } else if(prop === \"semester\") {\r\n            this.setState({createClass_semester: value});\r\n        }\r\n    }\r\n\r\n    getAlpha(string) {\r\n        let split1 = null;\r\n        let split2 = null;\r\n        let split3 = null;\r\n        for (let i = 0; i < string.length; i++) {\r\n           if (string.substring(i, i+1) === ',') {\r\n              if (split1 === null) {\r\n                 split1 = i;\r\n              } else if(split2 === null) {\r\n                 split2 = i;\r\n              } else {//slpit 3\r\n                 split3 = i;\r\n                 break;\r\n              }\r\n           }\r\n        }\r\n        if(split3 === null){//rgb instead of rgba\r\n           return 1;\r\n        }\r\n        let alpha = null;\r\n        for (let i = split3; i < string.length; i++) {\r\n           if(string.substring(i, i+1) === ')') {\r\n              alpha = string.substring(split3+2, i);\r\n              break;\r\n           }\r\n        }\r\n        return parseFloat(alpha);\r\n     }\r\n\r\n     loadIframe(buttonNumber) {\r\n        this.setState({iframeButtonControl: buttonNumber});\r\n     }\r\n\r\n    render() {\r\n        let iframeContent;\r\n        if(this.state.iframeButtonControl === 0) {\r\n            iframeContent = <CurrentClassIframe />\r\n        } else if (this.state.iframeButtonControl === 1) {\r\n            iframeContent = <CreateClassIframe\r\n                classCode={this.state.createClass_ClassCode}\r\n                startYear={this.state.createClass_startYear}\r\n                endYear={this.state.createClass_endYear}\r\n                semester={this.state.createClass_semester}\r\n                changeProps={this.changeProps.bind(this)}\r\n            />;\r\n        } else if (this.state.iframeButtonControl === 2) {\r\n            iframeContent = <PastClassIframe />;\r\n        }\r\n        \r\n        return (\r\n            <div>\r\n                <div className=\"mainIframe\">\r\n                    {iframeContent}\r\n                </div>\r\n                <input type=\"button\" className=\"homeButton\" value=\"Current Classes\"\r\n                style={{top: ((window.innerHeight / 4) - (window.innerHeight / 20)).toString() + \"px\"}}\r\n                onClick={() => this.buttonClicked(0)}/>\r\n                <input type=\"button\" className=\"homeButton\" value=\"Create Class\"\r\n                style={{top: ((window.innerHeight / 2) - (window.innerHeight / 20)).toString() + \"px\"}}\r\n                onClick={() => this.buttonClicked(1)}/>\r\n                <input type=\"button\" className=\"homeButton\" value=\"Past Classes\"\r\n                style={{top: ((window.innerHeight * 3/ 4) - (window.innerHeight / 20)).toString() + \"px\"}}\r\n                onClick={() => this.buttonClicked(2)}/>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport './App.css';\r\n//import {BrowserRouter as Router, Switch, Route, Link} from \"react-router-dom\";\r\nimport HomeScreen from './components/home/HomeScreen.jsx';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      {/*<p>hello darkness my old friend</p>\r\n      <Router>\r\n        <nav>\r\n          <ul>\r\n            <li>\r\n              <Link to=\"/about\">About</Link>\r\n            </li>\r\n          </ul>\r\n        </nav>\r\n        <Switch>\r\n          <Route path=\"/about\">\r\n            <HomeScreen />\r\n          </Route>\r\n        </Switch>\r\n      </Router>*/}\r\n      <HomeScreen />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}