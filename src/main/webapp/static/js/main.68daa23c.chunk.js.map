{"version":3,"sources":["components/home/iframe/createClassIframeComponents/CreateNewCurriculum.jsx","components/home/iframe/createClassIframeComponents/TaskListOptionScreen.jsx","components/home/iframe/createClassIframeComponents/LoadOldCurriculum.jsx","components/home/iframe/createClassIframeComponents/CreateClassIframe.jsx","components/home/iframe/currentClassIframeComponents/CurrentClassIframe.jsx","components/home/iframe/pastClassIframeComponents/PastClassIframe.jsx","components/home/HomeScreen.jsx","App.js","serviceWorker.js","index.js"],"names":["CreateNewCurriculum","className","this","props","classCode","React","Component","TaskListOptionScreen","handleChange","selectedOption","setState","openOption","fetch","state","curriculumName","label","then","Respone","json","message","curriculumTaskListTasks","options","optionArray","curriculumTaskList","map","taskName","push","value","getRowsForTask","myRows","myRawRows","i","myLessRawButStillRawRows","myLessRawRows","task","taskNumber","TaskNumber","expectations","arrayToString","Curriculums","taskDesc","Description","array","myString","parseInt","length","console","log","forceToCreate","currentCurriculum","curriculumObject","selectOldTaskList","Response","optionMenu","taskTable","onChange","rows","DataGrid","columns","key","name","id","onClick","LoadOldCurriculum","viewMode","allCurriculums","viewCurriculum","Message","curriculumExpectations","saveCurriculum","taskWindow","dropMenu","curriculumButtonDiv","viewIframe","StyleTop","document","getElementById","getBoundingClientRect","bottom","toString","curriculum","cur","expectation","CurriculumNumber","description","style","top","projectedScreen","fontSize","width","alignContent","loadOld","CreateClassIframe","startYear","endYear","semester","iframeWindow","classCodeValue","changeProps","startYearValue","endYearValue","semesterValue","classCodeInitValue","startYearInitValue","endYearInitValue","semesterInitValue","createClassHomeIframe","type","placeholder","apdateHomeValues","CreateCurriculum","createCurriculumIframe","loadOldCurriculumIframe","iframeCurrentWindow","CurrentClassIframe","PastClassIframe","HomeScreen","iframeButtonControl","createClass_ClassCode","createClass_startYear","createClass_endYear","createClass_semester","home","buttonNumber","that","buttonList","body","getElementsByClassName","destinationXpoint","window","innerWidth","setInterval","myFrame","buttonIndex","button","x","clearInterval","left","alpha","getAlpha","getComputedStyle","backgroundColor","parseFloat","color","loadIframe","prop","string","split1","split2","split3","substring","iframeContent","button0State","button1State","button2State","bind","innerHeight","buttonClicked","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.68daa23c.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../iframeStyles.css';\r\n\r\nexport default class CreateNewCurriculum extends React.Component {\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"iframeContent\">\r\n                <h1>Create Curriculum for: {this.props.classCode}</h1>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport DataGrid from 'react-data-grid';\r\nimport Select from 'react-select';\r\nimport '../iframeStyles.css';\r\n\r\nexport default class TaskListOptionScreen extends React.Component {\r\n    //props loadOld if false: creating new, hide select old task list\r\n    //props currentCurriculum: the curriculum that we are selecting the tasks for.\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            forceToCreate: false,\r\n            curriculumName: this.props.currentCurriculum,\r\n            curriculumObject: null,\r\n            curriculumTaskList: [],\r\n            openOption: null,\r\n            curriculumTaskListTasks: null,\r\n            selectOldTaskList: false,\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('http://localhost:8080/api/data/curriculum/' + this.state.curriculumName).then(Response => {return Response.json()}).then(message => {\r\n            this.setState({curriculumObject: message})});\r\n        fetch('http://localhost:8080/api/data/curriculum/' + this.state.curriculumName + '/tasks').then(Response => {return Response.json()}).then(message => {\r\n            this.setState({curriculumTaskList: message})});\r\n    }\r\n\r\n    selectOldTaskList() {\r\n        this.setState({selectOldTaskList: true});\r\n    }\r\n\r\n    handleChange = selectedOption => {\r\n        this.setState({openOption: selectedOption});\r\n        fetch('http://localhost:8080/api/data/curriculum/' + this.state.curriculumName + '/tasks/' + selectedOption.label).then(Respone => {return Respone.json()}).then(message => {\r\n            this.setState({curriculumTaskListTasks: message})});\r\n\r\n    }\r\n\r\n    options = () => {\r\n        let optionArray = [];\r\n        this.state.curriculumTaskList.map(taskName => (optionArray.push({value: taskName, label: taskName})));\r\n        return optionArray;\r\n    }\r\n\r\n    getRowsForTask = () => {\r\n        let myRows = [];\r\n        if(this.state.curriculumTaskListTasks) {\r\n            let myRawRows = [];\r\n            for(var i in this.state.curriculumTaskListTasks)\r\n                myRawRows.push([i, this.state.curriculumTaskListTasks[i]]);;\r\n            let myLessRawButStillRawRows = myRawRows[0][1];\r\n            let myLessRawRows = [];\r\n            for(var i in myLessRawButStillRawRows)\r\n                myLessRawRows.push(myLessRawButStillRawRows[i]);\r\n            myLessRawRows.map(task => (myRows.push({taskNumber: task.TaskNumber, expectations: this.arrayToString(task.Curriculums), taskDesc: task.Description})))\r\n        }\r\n        return myRows;\r\n    }\r\n    \r\n    arrayToString = array => {\r\n        let myString = \"\";\r\n        for(let i in array) {\r\n            myString = myString + array[i];\r\n            if(parseInt(i) + 1 !== array.length) {\r\n                myString = myString + \", \"; \r\n            }\r\n        }\r\n        console.log(myString);\r\n        return myString;\r\n    }\r\n\r\n    render() {\r\n        let optionMenu, taskTable = null;\r\n        if(this.state.selectOldTaskList) {\r\n            optionMenu = (\r\n                <Select className=\"loadCurriculumDropDownMenu\" value={this.state.openOption} onChange={this.handleChange} options={this.options()}/>\r\n            );\r\n            \r\n            if(this.state.openOption) {\r\n                const columns = [{key: 'taskNumber', name: 'Task Number'},{key: 'expectations', name: 'Expectations in Curriculum'},{key: 'taskDesc', name: 'Task Description'}];\r\n                //let rows = [{taskNumber: \"T1\", taskDesc: \"Task Description\"}];\r\n                let rows = this.getRowsForTask();\r\n                taskTable = (\r\n                    <div className=\"selectOldTasksDiv\">\r\n                        <DataGrid columns={columns} rows={rows}/>\r\n                    </div>\r\n                );\r\n                }\r\n        }\r\n        return(\r\n            <div className=\"taskListMainScreen\">\r\n                        <h2>Please select an option for your tasks</h2>\r\n                        <h4>Tasks include all tests, quizzes, asignments and evaluations</h4>\r\n                        <br/>\r\n                        <div className=\"taskOptionsButtonDiv\">\r\n                            <button className=\"taskOptionButton\" id=\"selectOldTaskButton\" onClick={() => {this.selectOldTaskList(this)}}>Select Old Task List</button>\r\n                            <button className=\"taskOptionButton\" id=\"createNewTaskButton\">Create New Task List</button>\r\n                        </div>\r\n                        <br/>\r\n                        {optionMenu}\r\n                        <br/>\r\n                        {taskTable}\r\n                    </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport '../iframeStyles.css';\r\nimport Select from 'react-select';\r\nimport DataGrid from 'react-data-grid';\r\nimport 'react-data-grid/dist/react-data-grid.css';\r\nimport TaskListOptionScreen from './TaskListOptionScreen.jsx';\r\n\r\nexport default class LoadOldCurriculum extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            allCurriculums: null,\r\n            openOption: null,\r\n            viewMode:false,\r\n            curriculumExpectations: null,\r\n            taskWindow: false,\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('http://localhost:8080/api/data/curriculum').then(Response => {return Response.json()}).then(Message => {\r\n            this.setState({allCurriculums: Message});});\r\n    }\r\n\r\n    handleChange = selectedOption => {\r\n        this.setState({openOption: selectedOption, viewMode:false});\r\n    }\r\n\r\n    options = () => {\r\n        let optionArray = [];\r\n        this.state.allCurriculums.map(curriculumName => (\r\n            optionArray.push({value: curriculumName, label: curriculumName})));\r\n        return optionArray;\r\n    }\r\n\r\n    viewCurriculum = () => {\r\n        fetch('http://localhost:8080/api/data/curriculum/' + this.state.openOption.label).then(Respone => {return Respone.json()}).then(Message => {\r\n            this.setState({curriculumExpectations: Message.Curriculums});\r\n        });\r\n        this.setState({viewMode:true});\r\n    }\r\n\r\n    saveCurriculum = () => {\r\n        this.setState({taskWindow:true});\r\n    }\r\n\r\n    render() {\r\n        let dropMenu, curriculumButtonDiv, viewIframe = null;\r\n\r\n        if(this.state.allCurriculums) {\r\n            dropMenu = (<Select className=\"loadCurriculumDropDownMenu\" value={this.state.openOption} onChange={this.handleChange} options={this.options()}/>);\r\n            \r\n            if(this.state.openOption) {\r\n                curriculumButtonDiv = (<div className=\"textBoxDiv\" id=\"optionDropMenuDiv\">\r\n                    <button className=\"textBox oldCurriculumSelectOptionButton\" id=\"oldCurriculumSaveOption\" onClick={this.saveCurriculum}>Save</button>\r\n                    <button className=\"textBox oldCurriculumSelectOptionButton\" id=\"oldCurriculumViewOption\" onClick={this.viewCurriculum}>View</button>\r\n                </div>);\r\n            }\r\n        }\r\n        \r\n        if(this.state.viewMode) {\r\n            let StyleTop = (document.getElementById(\"optionDropMenuDiv\").getBoundingClientRect().bottom + 20).toString() + \"px\";\r\n            const columns = [{ key: 'expectation', name: 'Expectation' },{ key: 'description', name: 'Description' }];\r\n            let rows = [];\r\n            if(this.state.curriculumExpectations) {\r\n                let curriculum = []\r\n                for(var i in this.state.curriculumExpectations)\r\n                    curriculum.push([i, this.state.curriculumExpectations[i]]);\r\n                curriculum.map(cur => (rows.push({expectation: cur[1].CurriculumNumber, description: cur[1].Description})));\r\n            }\r\n            viewIframe = (\r\n                <div id=\"viewOldCurriculumIframe\" style={{top: StyleTop}}>\r\n                    <DataGrid columns={columns} rows={rows}/>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        let projectedScreen = (\r\n            <div className=\"iframeContent\">\r\n                <h1 style={{fontSize: \"3vmin\"}}>Load Curriculum for: {this.props.classCode}</h1>\r\n                <div style={{width: \"100%\", alignContent: \"center\"}}>\r\n                    {dropMenu}\r\n                </div>\r\n                {curriculumButtonDiv}\r\n                {viewIframe}\r\n            </div>\r\n        );\r\n\r\n        if(this.state.taskWindow)\r\n        projectedScreen = (\r\n            <TaskListOptionScreen loadOld={true} currentCurriculum={this.state.openOption.label}/>\r\n        );\r\n\r\n        return projectedScreen;\r\n    }\r\n}","import React from 'react';\r\nimport '../iframeStyles.css';\r\nimport CreateNewCurriculum from './CreateNewCurriculum.jsx';\r\nimport LoadOldCurriculum from './LoadOldCurriculum.jsx';\r\n\r\nexport default class CreateClassIframe extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            classCode: props.classCode,\r\n            startYear: props.startYear,\r\n            endYear: props.endYear,\r\n            semester: props.semester,\r\n            iframeWindow: 0,\r\n        }\r\n    }\r\n\r\n    apdateHomeValues() {\r\n        let classCodeValue = document.getElementById(\"classCodeBox\").value;\r\n        if(classCodeValue === \"\")\r\n            this.props.changeProps(\"classCode\", null);\r\n        else\r\n            this.props.changeProps(\"classCode\", classCodeValue);\r\n\r\n        let startYearValue = document.getElementById(\"startYearBox\").value;\r\n        if(startYearValue === \"\")\r\n            this.props.changeProps(\"startYear\", null);\r\n        else\r\n            this.props.changeProps(\"startYear\", startYearValue);\r\n\r\n        let endYearValue = document.getElementById(\"endYearBox\").value;\r\n        if(endYearValue === \"\")\r\n            this.props.changeProps(\"endYear\", null);\r\n        else\r\n            this.props.changeProps(\"endYear\", endYearValue);\r\n\r\n        let semesterValue = document.getElementById(\"semesterBox\").value;\r\n        if(semesterValue === \"\")\r\n            this.props.changeProps(\"semester\", null);\r\n        else\r\n            this.props.changeProps(\"semester\", semesterValue);\r\n    }\r\n\r\n    render() {\r\n        let classCodeInitValue;\r\n        if(this.state.classCode) {\r\n            classCodeInitValue = this.state.classCode;\r\n            this.setState({classCode: null});\r\n        }\r\n        let startYearInitValue;\r\n        if(this.state.startYear) {\r\n            startYearInitValue = this.state.startYear;\r\n            this.setState({startYear: null});\r\n        }\r\n\r\n        let endYearInitValue;\r\n        if(this.state.endYear) {\r\n            endYearInitValue = this.state.endYear;\r\n            this.setState({endYear: null});\r\n        }\r\n\r\n        let semesterInitValue;\r\n        if(this.state.semester) {\r\n            semesterInitValue = this.state.semester;\r\n            this.setState({semester: null});\r\n        }\r\n        let createClassHomeIframe = (\r\n            <div className=\"iframeContent\">\r\n                <h1>Create Class</h1>\r\n                <h4>Please enter class code in the following format:</h4>\r\n                <div className=\"textBoxDiv\" id=\"classCodeDiv\">\r\n                    <input type=\"text\" className=\"textBox\" id=\"classCodeBox\" placeholder=\"ICS4U-01\" value={classCodeInitValue}\r\n                    onChange={() => this.apdateHomeValues()}/>\r\n                </div>\r\n                <br/>\r\n                <h4>Please enter school year in the designated textboxes:</h4>\r\n                <div className=\"textBoxDiv\" id=\"yearDateDiv\">\r\n                    <input type=\"text\" className=\"textBox yearDateTextBox\" id=\"startYearBox\" placeholder=\"Start Year (2019)\"\r\n                    value={startYearInitValue} onChange={() => this.apdateHomeValues()} />\r\n                    \r\n                    <input type=\"text\" className=\"textBox yearDateTextBox\" id=\"endYearBox\" placeholder=\"End Year (2020)\"\r\n                    value={endYearInitValue} onChange={() => this.apdateHomeValues()} />\r\n                    \r\n                    <input type=\"text\" className=\"textBox yearDateTextBox\" id=\"semesterBox\" placeholder=\"Semester (1 or 2)\"\r\n                    value={semesterInitValue} onChange={() => this.apdateHomeValues()} />\r\n                </div>\r\n                <br/>\r\n                <h4>Please select a curriculum option:</h4>\r\n                <div className = \"buttonDiv\" id=\"curriculumButtonDiv\">\r\n                    <button className=\"textBox curriculumButton\" id=\"CreateCurriculumButton\"\r\n                    onClick={() => this.CreateCurriculum()}>Create Curriculum</button>\r\n                    \r\n                    <button className=\"textBox curriculumButton\" id=\"OldCurriculumButton\"\r\n                    onClick={() => this.LoadOldCurriculum()}>Use Old Curriculum</button>\r\n                </div>\r\n            </div>\r\n        );\r\n        let createCurriculumIframe = (\r\n                <CreateNewCurriculum classCode={this.props.classCode? this.props.classCode : \"Class Code Not Given\"}/>\r\n        );\r\n\r\n        let loadOldCurriculumIframe = (\r\n            <div className=\"iframeContent\">\r\n                <LoadOldCurriculum classCode={this.props.classCode? this.props.classCode : \"Class Code Not Given\"}/>\r\n            </div>\r\n        );\r\n        let iframeCurrentWindow = createClassHomeIframe;\r\n        if(this.state.iframeWindow === 1)\r\n            iframeCurrentWindow = createCurriculumIframe;\r\n        else if(this.state.iframeWindow === 2)\r\n            iframeCurrentWindow = loadOldCurriculumIframe;\r\n        return(\r\n            iframeCurrentWindow \r\n        )\r\n    }\r\n    /*\r\n    state.iframeWindow\r\n    0: main window\r\n    1: create curriculum\r\n    2: old curriculum\r\n    */\r\n    CreateCurriculum() {\r\n        this.setState({iframeWindow: 1});\r\n    }\r\n    LoadOldCurriculum() {\r\n        this.setState({iframeWindow: 2});\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nexport default class CurrentClassIframe extends React.Component {\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <h1>Current Classes</h1>\r\n                <h2>Feature not yet installed</h2>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nexport default class PastClassIframe extends React.Component {\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <h1>Past Classes</h1>\r\n                <h2>Feature not yet installed</h2>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport './homeScreenStyles.css';\r\nimport CreateClassIframe from './iframe/createClassIframeComponents/CreateClassIframe.jsx';\r\nimport CurrentClassIframe from './iframe/currentClassIframeComponents/CurrentClassIframe.jsx';\r\nimport PastClassIframe from './iframe/pastClassIframeComponents/PastClassIframe.jsx';\r\n//import Button from '@material-ui/core/Button';\r\n\r\nexport default class HomeScreen extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            iframeButtonControl: null,\r\n            createClass_ClassCode: null,\r\n            createClass_startYear: null,\r\n            createClass_endYear: null,\r\n            createClass_semester: null,\r\n            home: this,\r\n        }\r\n    }\r\n\r\n    buttonClicked(buttonNumber) {\r\n        let that = this;\r\n        //moves buttons and loads iframe\r\n        let buttonList = document.body.getElementsByClassName(\"homeButton\");\r\n        const destinationXpoint = window.innerWidth / 10;\r\n        \r\n        var id = setInterval(frame, 5);\r\n        function frame() {\r\n            let myFrame = document.body.getElementsByClassName(\"mainIframe\")[0];\r\n            for (let buttonIndex = 0; buttonIndex < buttonList.length; buttonIndex++) {\r\n                let button = buttonList[buttonIndex];\r\n                /***MOVES BUTTONS LEFT***/\r\n                if(button.getBoundingClientRect().x < destinationXpoint) {\r\n                    clearInterval(id);\r\n                } else {\r\n                    button.style.left = (button.getBoundingClientRect().x - 3).toString() + \"px\";\r\n                }\r\n                /***FADE IN IFRAME***/\r\n                let alpha = that.getAlpha(getComputedStyle(document.body.getElementsByClassName(\"mainIframe\")[0]).backgroundColor);\r\n                if(alpha < 1) {\r\n                    myFrame.style.backgroundColor = \"rgba(245,245,245,\"+((parseFloat(alpha) + 0.005).toString())+\")\";\r\n                    myFrame.style.color = \"rgba(0,0,0,\"+((parseFloat(alpha) + 0.005).toString())+\")\";\r\n                }\r\n            }\r\n        }\r\n        //loads iframe depends on what button was pressed\r\n        this.loadIframe(buttonNumber);\r\n    }\r\n\r\n    changeProps(prop, value) {\r\n        if(prop === \"classCode\") {\r\n            this.setState({createClass_ClassCode: value});\r\n        } else if(prop === \"startYear\") {\r\n            this.setState({createClass_startYear: value});\r\n        } else if(prop === \"endYear\") {\r\n            this.setState({createClass_endYear: value});\r\n        } else if(prop === \"semester\") {\r\n            this.setState({createClass_semester: value});\r\n        }\r\n    }\r\n\r\n    getAlpha(string) {\r\n        let split1 = null;\r\n        let split2 = null;\r\n        let split3 = null;\r\n        for (let i = 0; i < string.length; i++) {\r\n           if (string.substring(i, i+1) === ',') {\r\n              if (split1 === null) {\r\n                 split1 = i;\r\n              } else if(split2 === null) {\r\n                 split2 = i;\r\n              } else {//slpit 3\r\n                 split3 = i;\r\n                 break;\r\n              }\r\n           }\r\n        }\r\n        if(split3 === null){//rgb instead of rgba\r\n           return 1;\r\n        }\r\n        let alpha = null;\r\n        for (let i = split3; i < string.length; i++) {\r\n           if(string.substring(i, i+1) === ')') {\r\n              alpha = string.substring(split3+2, i);\r\n              break;\r\n           }\r\n        }\r\n        return parseFloat(alpha);\r\n     }\r\n\r\n     loadIframe(buttonNumber) {\r\n        this.setState({iframeButtonControl: buttonNumber});\r\n     }\r\n\r\n    render() {\r\n        let button0State = this.state.iframeButtonControl === 0? \"homeButton boldButton\" : \"homeButton unboldenButton\";\r\n        let button1State = this.state.iframeButtonControl === 1? \"homeButton boldButton\" : \"homeButton unboldenButton\";\r\n        let button2State = this.state.iframeButtonControl === 2? \"homeButton boldButton\" : \"homeButton unboldenButton\";\r\n        let iframeContent;\r\n        if(this.state.iframeButtonControl === 0) {\r\n            iframeContent = <CurrentClassIframe />\r\n        } else if (this.state.iframeButtonControl === 1) {\r\n            iframeContent = <CreateClassIframe\r\n                classCode={this.state.createClass_ClassCode}\r\n                startYear={this.state.createClass_startYear}\r\n                endYear={this.state.createClass_endYear}\r\n                semester={this.state.createClass_semester}\r\n                changeProps={this.changeProps.bind(this)}\r\n            />;\r\n        } else if (this.state.iframeButtonControl === 2) {\r\n            iframeContent = <PastClassIframe />;\r\n        }\r\n        \r\n        return (\r\n            <div>\r\n                <div className=\"mainIframe\">\r\n                    {iframeContent}\r\n                </div>\r\n                <input type=\"button\" className={button0State} value=\"Current Classes\"\r\n                style={{top: ((window.innerHeight / 4) - (window.innerHeight / 20)).toString() + \"px\"}}\r\n                onClick={() => this.buttonClicked(0)}/>\r\n                <input type=\"button\" className={button1State} value=\"Create Class\"\r\n                style={{top: ((window.innerHeight / 2) - (window.innerHeight / 20)).toString() + \"px\"}}\r\n                onClick={() => this.buttonClicked(1)}/>\r\n                <input type=\"button\" className={button2State} value=\"Past Classes\"\r\n                style={{top: ((window.innerHeight * 3/ 4) - (window.innerHeight / 20)).toString() + \"px\"}}\r\n                onClick={() => this.buttonClicked(2)}/>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport './App.css';\r\n//import {BrowserRouter as Router, Switch, Route, Link} from \"react-router-dom\";\r\nimport HomeScreen from './components/home/HomeScreen.jsx';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      {/*<p>hello darkness my old friend</p>\r\n      <Router>\r\n        <nav>\r\n          <ul>\r\n            <li>\r\n              <Link to=\"/about\">About</Link>\r\n            </li>\r\n          </ul>\r\n        </nav>\r\n        <Switch>\r\n          <Route path=\"/about\">\r\n            <HomeScreen />\r\n          </Route>\r\n        </Switch>\r\n      </Router>*/}\r\n      <HomeScreen />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}