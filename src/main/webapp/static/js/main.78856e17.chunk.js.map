{"version":3,"sources":["components/home/iframe/createClassIframeComponents/CreateNewTaskList.jsx","components/home/iframe/createClassIframeComponents/CreateNewCurriculum.jsx","components/home/iframe/createClassIframeComponents/TaskListOptionScreen.jsx","components/home/iframe/createClassIframeComponents/LoadOldCurriculum.jsx","components/home/iframe/createClassIframeComponents/CreateClassIframe.jsx","components/home/iframe/currentClassIframeComponents/CurrentClassIframe.jsx","components/home/iframe/pastClassIframeComponents/PastClassIframe.jsx","components/home/HomeScreen.jsx","App.js","serviceWorker.js","index.js"],"names":["CreateNewTaskList","props","React","Component","CreateNewCurriculum","courseCodeFromClassCode","classCode","i","length","substring","validateCurriculumName","curriculumPureName","defaultName","state","allCurriculumsArray","allCurriculums","allCurriculumsPureNames","purifyArray","includes","suggestedName","curriculumIndex","countHowManyInArray","indexCorrection","dirtyArray","pureArray","dirtyObject","cleanObject","underscoreIndex","j","push","closePopup","document","getElementById","remove","getUserCurriculumInfo","expectationBox","descriptionBox","value","newInput","rows","unshift","expectation","desc","setState","saveCurriculum","displayTaskList","curriculumName","columns","key","name","array","object","frequency","fetch","then","Response","json","message","pureCurriculumName","this","classDetails","code","start","end","proposedCurriculumName","backgroundDiv","createElement","body","appendChild","className","id","addEventListener","popupDiv","popupDivHeader","innerHTML","expectationText","expectationTextbox","type","placeholder","style","height","descriptionText","descriptionTextbox","width","font","resize","Break1","Break2","Break3","Break4","saveButton","display","myNumber","getElementsByClassName","getBoundingClientRect","curriculum","fontSize","onClick","DataGrid","getRowInfo","window","onkeyup","e","click","TaskListOptionScreen","handleChange","selectedOption","openOption","label","Respone","curriculumTaskListTasks","options","optionArray","curriculumTaskList","map","taskName","getRowsForTask","myRows","myRawRows","myLessRawButStillRawRows","myLessRawRows","task","taskNumber","TaskNumber","expectations","arrayToString","Curriculums","taskDesc","Description","myString","parseInt","cancelTaskView","bringToConfirmHomeScreen","newJsonObject","taskList","changeToConfirm","forceToCreate","currentCurriculum","curriculumObject","selectOldTaskListState","optionMenu","taskTable","optionButtons","onChange","disabled","selectOldTaskListFunction","LoadOldCurriculum","viewMode","viewCurriculum","Message","curriculumExpectations","taskWindow","dropMenu","curriculumButtonDiv","viewIframe","StyleTop","bottom","toString","cur","CurriculumNumber","description","top","projectedScreen","alignContent","loadOld","CreateClassIframe","startYear","endYear","semester","iframeWindow","confirmScreen","classCodeValue","changeProps","startYearValue","endYearValue","semesterValue","apdateHomeValues","classCodeInitValue","startYearInitValue","endYearInitValue","semesterInitValue","bottomHalf","curriculumText","saveConfirm","cancelConfirm","CreateCurriculum","createClassHomeIframe","createCurriculumIframe","bind","loadOldCurriculumIframe","iframeCurrentWindow","arrayOfErrors","arrayOfLife","replace","console","log","alert","CurrentClassIframe","PastClassIframe","HomeScreen","iframeButtonControl","createClass_ClassCode","createClass_startYear","createClass_endYear","createClass_semester","createClass_curriculum","createClass_taskList","home","buttonNumber","that","buttonList","destinationXpoint","innerWidth","setInterval","myFrame","buttonIndex","button","x","clearInterval","left","alpha","getAlpha","getComputedStyle","backgroundColor","parseFloat","color","loadIframe","prop","string","split1","split2","split3","iframeContent","button0State","button1State","button2State","innerHeight","buttonClicked","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.78856e17.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default class CreateNewTaskList extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    \r\n    render() {\r\n        return(\r\n            <h1>Hello World</h1>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport '../iframeStyles.css';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport DataGrid from 'react-data-grid';\r\nimport CreateNewTaskList from './CreateNewTaskList.jsx';\r\n\r\nexport default class CreateNewCurriculum extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            allCurriculumsArray: null,\r\n            curriculumName: null,\r\n            columns: [{key: 'expectation', name: 'Expectation'},{key: 'desc', name: 'Description'}],\r\n            rows: [],\r\n            displayTaskList: false,\r\n        }\r\n    }\r\n    \r\n    courseCodeFromClassCode = classCode => {\r\n        if (!classCode) return;\r\n        for(let i = 0; i < classCode.length; i++) {\r\n            if(classCode.substring(i, i+1) === '-') {\r\n                return classCode.substring(0, i);\r\n            }\r\n        }\r\n        return classCode;\r\n    }\r\n\r\n    validateCurriculumName = curriculumPureName => {\r\n        const defaultName = curriculumPureName + \"_1\";\r\n        if(this.state.allCurriculumsArray) {\r\n            const allCurriculums = this.state.allCurriculumsArray;\r\n            const allCurriculumsPureNames = this.purifyArray(allCurriculums);\r\n            if(allCurriculumsPureNames.includes(curriculumPureName)) {\r\n                const curriculumIndex = this.countHowManyInArray(allCurriculumsPureNames, curriculumPureName);\r\n                let indexCorrection = 0;\r\n                let suggestedName;\r\n                do {\r\n                    indexCorrection++;\r\n                    let index = curriculumIndex + indexCorrection;\r\n                    suggestedName = curriculumPureName + \"_\" + index;\r\n                } while(allCurriculums.includes(suggestedName));\r\n                return suggestedName;\r\n            }\r\n        }\r\n        return defaultName;\r\n    }\r\n\r\n    countHowManyInArray(array, object) {\r\n        let frequency = 0;\r\n        for (let i = 0; i < array.length; i++) {\r\n            if(array[i] === object) {\r\n                frequency++;\r\n            }\r\n        }\r\n        return frequency;\r\n    }\r\n\r\n    purifyArray = dirtyArray => {\r\n        let pureArray = [];\r\n        for (let i = 0; i < dirtyArray.length; i++) {\r\n            let dirtyObject = dirtyArray[i];\r\n            let cleanObject = null;\r\n            let underscoreIndex = 0;\r\n            for (let j = 0; j < dirtyObject.length; j++) {\r\n                if(dirtyObject.substring(j, j+1) === \"_\") {\r\n                    underscoreIndex === 1 ? cleanObject = dirtyObject.substring(0, j) :  underscoreIndex++;\r\n                }\r\n            }\r\n            pureArray.push(cleanObject);\r\n        }\r\n        return pureArray;\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('http://localhost:8080/api/data/curriculum').then(Response => {return Response.json()}).then(message => {this.setState({allCurriculumsArray: message})});\r\n        let courseCode = this.courseCodeFromClassCode(this.props.classDetails.code);\r\n        let pureCurriculumName = courseCode + \"_\" + this.props.classDetails.start + \"-\" + this.props.classDetails.end;\r\n        let proposedCurriculumName = this.validateCurriculumName(pureCurriculumName);\r\n        this.setState({curriculumName: proposedCurriculumName}); \r\n    }\r\n\r\n    closePopup = () => {\r\n        if(document.getElementById(\"createCurriculumPopupBackground\")) {\r\n            document.getElementById(\"createCurriculumPopupBackground\").remove();\r\n            document.getElementById(\"createCurriculumPopupContent\").remove();\r\n        }\r\n    }\r\n\r\n    getRowInfo() {\r\n        let backgroundDiv = document.createElement(\"div\");\r\n        document.body.appendChild(backgroundDiv);\r\n        backgroundDiv.className = \"popupBackgroundDiv\";\r\n        backgroundDiv.id = \"createCurriculumPopupBackground\";\r\n        backgroundDiv.addEventListener('click', this.closePopup);\r\n        \r\n        let popupDiv = document.createElement(\"div\");\r\n        document.body.appendChild(popupDiv);\r\n        popupDiv.className = \"popupItself\";\r\n        popupDiv.id = \"createCurriculumPopupContent\"\r\n        \r\n        let popupDivHeader = document.createElement(\"h1\");\r\n        popupDiv.appendChild(popupDivHeader);\r\n        popupDivHeader.innerHTML = \"Please enter the information below\";\r\n\r\n        let expectationText = document.createElement(\"h3\");\r\n        popupDiv.appendChild(expectationText);\r\n        expectationText.innerHTML = \"Please enter the expectation:\";\r\n\r\n        let expectationTextbox = document.createElement(\"input\");\r\n        expectationTextbox.type = \"text\"\r\n        popupDiv.appendChild(expectationTextbox);\r\n        expectationTextbox.placeholder = \"A1\";\r\n        expectationTextbox.className = \"textBox\";\r\n        expectationTextbox.id = \"expectationTextboxInCreateCurriculum\";\r\n        expectationTextbox.style.height = \"7%\";\r\n\r\n        let descriptionText = document.createElement(\"h3\");\r\n        popupDiv.appendChild(descriptionText);\r\n        descriptionText.innerHTML = \"Please enter the description:\";\r\n\r\n        let descriptionTextbox = document.createElement(\"textarea\");\r\n        popupDiv.appendChild(descriptionTextbox);\r\n        descriptionTextbox.placeholder = \"description\";\r\n        descriptionTextbox.className = \"textBox\";\r\n        descriptionTextbox.id = \"descriptionTextboxInCreateCurriculum\";\r\n        descriptionTextbox.style.height = \"20%\";\r\n        descriptionTextbox.style.width = \"65%\";\r\n        descriptionTextbox.style.font = \"normal 2vmin ariel,serif\";\r\n        descriptionTextbox.style.resize = \"none\";\r\n\r\n        let Break1 = document.createElement(\"br\");\r\n        popupDiv.appendChild(Break1);\r\n        let Break2 = document.createElement(\"br\");\r\n        popupDiv.appendChild(Break2);\r\n        let Break3 = document.createElement(\"br\");\r\n        popupDiv.appendChild(Break3);\r\n        let Break4 = document.createElement(\"br\");\r\n        popupDiv.appendChild(Break4);\r\n\r\n        let saveButton = document.createElement(\"button\");\r\n        popupDiv.appendChild(saveButton);\r\n        saveButton.className=\"textBox\";\r\n        saveButton.style.height = \"7%\";\r\n        saveButton.style.width = \"35%\";\r\n        saveButton.innerHTML = \"save\";\r\n        saveButton.style.display = \"inline\";\r\n        saveButton.id = \"saveUserInputInCreateCurriculumButton\";\r\n        saveButton.addEventListener('click', this.getUserCurriculumInfo)\r\n    }\r\n\r\n    getUserCurriculumInfo = () => {\r\n        let expectationBox = document.getElementById(\"expectationTextboxInCreateCurriculum\");\r\n        let descriptionBox = document.getElementById(\"descriptionTextboxInCreateCurriculum\");\r\n        if(expectationBox.value && descriptionBox.value) {\r\n            let newInput = this.state.rows;\r\n            newInput.unshift({expectation: expectationBox.value, desc: descriptionBox.value});\r\n            this.setState({rows: newInput});\r\n            this.closePopup();\r\n        }\r\n    }\r\n\r\n    saveCurriculum = () => {\r\n        //if(this.state.rows.length > 0)\r\n            this.setState({displayTaskList: true});\r\n    }\r\n\r\n    render() {\r\n        //axios.post(`http://localhost:8080/api/data/curriculum/newName/${proposedCurriculumName}`);\r\n        let myNumber;\r\n        if(document.body.getElementsByClassName(\"iframeContent\")) {\r\n            myNumber = document.body.getElementsByClassName(\"iframeContent\")[0].getBoundingClientRect().height * 0.75;\r\n        }\r\n        if(!this.state.displayTaskList) {\r\n            return(\r\n                <div className=\"iframeContent\">\r\n                    <h2>Creating Curriculum: {this.state.curriculumName}</h2>\r\n                    <SaveIcon id=\"saveButtonForCreateCurriculum\" style={{fontSize: 40}} onClick={() => {this.saveCurriculum(this)}}/>\r\n                    <DataGrid columns={this.state.columns} rows={this.state.rows} height={myNumber}/>\r\n                    <AddIcon style={{fontSize: 80}} onClick={() => {this.getRowInfo(this)}}/>\r\n                </div>\r\n            );\r\n        }\r\n        return(\r\n            <CreateNewTaskList curriculumName={this.state.curriculumName} curriculum={this.state.rows}/>\r\n        );\r\n    }\r\n}\r\n\r\nwindow.onkeyup = e => {\r\n    if(document.getElementById(\"createCurriculumPopupBackground\")) {\r\n        if(e.key === \"Escape\")\r\n            document.getElementById(\"createCurriculumPopupBackground\").click();\r\n        else if(e.key === \"Enter\")\r\n            document.getElementById(\"saveUserInputInCreateCurriculumButton\").click();\r\n    }\r\n}","import React from 'react';\r\nimport DataGrid from 'react-data-grid';\r\nimport Select from 'react-select';\r\nimport '../iframeStyles.css';\r\n\r\nexport default class TaskListOptionScreen extends React.Component {\r\n    //props loadOld if false: creating new, hide select old task list\r\n    //props currentCurriculum: the curriculum that we are selecting the tasks for.\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            forceToCreate: false,\r\n            curriculumName: this.props.currentCurriculum,\r\n            curriculumObject: null,\r\n            curriculumTaskList: [],\r\n            openOption: null,\r\n            curriculumTaskListTasks: null,\r\n            selectOldTaskListState: false,\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('http://localhost:8080/api/data/curriculum/' + this.state.curriculumName).then(Response => {return Response.json()}).then(message => {\r\n            this.setState({curriculumObject: message})});\r\n        fetch('http://localhost:8080/api/data/curriculum/' + this.state.curriculumName + '/tasks').then(Response => {return Response.json()}).then(message => {\r\n            this.setState({curriculumTaskList: message})});\r\n    }\r\n\r\n    selectOldTaskListFunction() {\r\n        this.setState({selectOldTaskListState: true});\r\n    }\r\n\r\n    handleChange = selectedOption => {\r\n        this.setState({openOption: selectedOption});\r\n        fetch('http://localhost:8080/api/data/curriculum/' + this.state.curriculumName + '/tasks/' + selectedOption.label).then(Respone => {return Respone.json()}).then(message => {\r\n            this.setState({curriculumTaskListTasks: message})});\r\n\r\n    }\r\n\r\n    options = () => {\r\n        let optionArray = [];\r\n        this.state.curriculumTaskList.map(taskName => (optionArray.push({value: taskName, label: taskName})));\r\n        return optionArray;\r\n    }\r\n\r\n    getRowsForTask = () => {\r\n        let myRows = [];\r\n        if(this.state.curriculumTaskListTasks) {\r\n            let myRawRows = [];\r\n            for(let i in this.state.curriculumTaskListTasks) {\r\n                myRawRows.push([i, this.state.curriculumTaskListTasks[i]]);\r\n            }\r\n            let myLessRawButStillRawRows = myRawRows[0][1];\r\n            let myLessRawRows = [];\r\n            for(let i in myLessRawButStillRawRows) {\r\n                myLessRawRows.push(myLessRawButStillRawRows[i]);\r\n            }\r\n            myLessRawRows.map(task => (myRows.push({taskNumber: task.TaskNumber, expectations: this.arrayToString(task.Curriculums), taskDesc: task.Description})))\r\n        }\r\n        return myRows;\r\n    }\r\n    \r\n    arrayToString = array => {\r\n        let myString = \"\";\r\n        for(let i in array) {\r\n            myString = myString + array[i];\r\n            if(parseInt(i) + 1 !== array.length) {\r\n                myString = myString + \", \"; \r\n            }\r\n        }\r\n        return myString;\r\n    }\r\n\r\n    cancelTaskView = () => {\r\n        this.setState({openOption: null});\r\n    }\r\n\r\n    bringToConfirmHomeScreen = () => {\r\n        let newJsonObject = this.props.classDetails;\r\n        newJsonObject.taskList = this.state.openOption.label;\r\n        this.props.changeToConfirm(newJsonObject);\r\n    }\r\n\r\n    render() {\r\n        let optionMenu, taskTable, optionButtons = null;\r\n        if(this.state.selectOldTaskListState) {\r\n            optionMenu = (\r\n                <Select className=\"loadCurriculumDropDownMenu\" value={this.state.openOption} onChange={this.handleChange} options={this.options()}/>\r\n            );\r\n            \r\n            if(this.state.openOption) {\r\n                const columns = [{key: 'taskNumber', name: 'Task Number'},{key: 'expectations', name: 'Expectations in Curriculum'},{key: 'taskDesc', name: 'Task Description'}];\r\n                let rows = this.getRowsForTask();\r\n                taskTable = (\r\n                    <div className=\"selectOldTasksDiv\">\r\n                        <DataGrid columns={columns} rows={rows}/>\r\n                    </div>\r\n                );\r\n\r\n                optionButtons = (\r\n                    <div className=\"taskOptionsButtonDiv\">\r\n                            <button className=\"taskOptionButton\" id=\"saveTaskButton\" onClick={() => {this.bringToConfirmHomeScreen(this)}}>Save</button>\r\n                            <button className=\"taskOptionButton\" id=\"cancelTaskButton\" onClick={() => {this.cancelTaskView(this)}}>Cancel</button>\r\n                    </div>\r\n                );\r\n\r\n                document.getElementById(\"selectOldTaskButton\").disabled = true;\r\n                document.getElementById(\"createNewTaskButton\").disabled = true;\r\n            } else {\r\n                document.getElementById(\"selectOldTaskButton\").disabled = false;\r\n                document.getElementById(\"createNewTaskButton\").disabled = false;\r\n            }\r\n        }\r\n        return(\r\n            <div className=\"taskListMainScreen\">\r\n                        <h2>Please select an option for your tasks</h2>\r\n                        <h4>Tasks include all tests, quizzes, asignments and evaluations</h4>\r\n                        <br/>\r\n                        <div className=\"taskOptionsButtonDiv\">\r\n                            <button className=\"taskOptionButton\" id=\"selectOldTaskButton\" onClick={() => {this.selectOldTaskListFunction(this)}}>Select Old Task List</button>\r\n                            <button className=\"taskOptionButton\" id=\"createNewTaskButton\">Create New Task List</button>\r\n                        </div>\r\n                        <br/>\r\n                        {optionMenu}\r\n                        <br/>\r\n                        {taskTable}\r\n                        <br/>\r\n                        {optionButtons}\r\n                    </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport '../iframeStyles.css';\r\nimport Select from 'react-select';\r\nimport DataGrid from 'react-data-grid';\r\nimport 'react-data-grid/dist/react-data-grid.css';\r\nimport TaskListOptionScreen from './TaskListOptionScreen.jsx';\r\n\r\nexport default class LoadOldCurriculum extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            allCurriculums: null,\r\n            openOption: null,\r\n            viewMode:false,\r\n            curriculumExpectations: null,\r\n            taskWindow: false,\r\n            classDetails: props.classDetails,\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('http://localhost:8080/api/data/curriculum').then(Response => {return Response.json()}).then(Message => {\r\n            this.setState({allCurriculums: Message});});\r\n    }\r\n\r\n    handleChange = selectedOption => {\r\n        this.setState({openOption: selectedOption, viewMode:false});\r\n    }\r\n\r\n    options = () => {\r\n        let optionArray = [];\r\n        this.state.allCurriculums.map(curriculumName => (\r\n            optionArray.push({value: curriculumName, label: curriculumName})));\r\n        return optionArray;\r\n    }\r\n\r\n    viewCurriculum = () => {\r\n        fetch('http://localhost:8080/api/data/curriculum/' + this.state.openOption.label).then(Respone => {return Respone.json()}).then(Message => {\r\n            this.setState({curriculumExpectations: Message.Curriculums});\r\n        });\r\n        this.setState({viewMode:true});\r\n    }\r\n\r\n    saveCurriculum = () => {\r\n        let newJsonObject = this.state.classDetails;\r\n        newJsonObject.curriculum = this.state.openOption.label;\r\n        this.setState({taskWindow:true, classDetails: newJsonObject});\r\n    }\r\n\r\n    render() {\r\n        let dropMenu, curriculumButtonDiv, viewIframe = null;\r\n\r\n        if(this.state.allCurriculums) {\r\n            dropMenu = (<Select className=\"loadCurriculumDropDownMenu\" value={this.state.openOption} onChange={this.handleChange} options={this.options()}/>);\r\n            \r\n            if(this.state.openOption) {\r\n                curriculumButtonDiv = (<div className=\"textBoxDiv\" id=\"optionDropMenuDiv\">\r\n                    <button className=\"textBox oldCurriculumSelectOptionButton\" id=\"oldCurriculumSaveOption\" onClick={this.saveCurriculum}>Save</button>\r\n                    <button className=\"textBox oldCurriculumSelectOptionButton\" id=\"oldCurriculumViewOption\" onClick={this.viewCurriculum}>View</button>\r\n                </div>);\r\n            }\r\n        }\r\n        \r\n        if(this.state.viewMode) {\r\n            let StyleTop = (document.getElementById(\"optionDropMenuDiv\").getBoundingClientRect().bottom + 20).toString() + \"px\";\r\n            const columns = [{ key: 'expectation', name: 'Expectation' },{ key: 'description', name: 'Description' }];\r\n            let rows = [];\r\n            if(this.state.curriculumExpectations) {\r\n                let curriculum = []\r\n                for(var i in this.state.curriculumExpectations)\r\n                    curriculum.push([i, this.state.curriculumExpectations[i]]);\r\n                curriculum.map(cur => (rows.push({expectation: cur[1].CurriculumNumber, description: cur[1].Description})));\r\n            }\r\n            viewIframe = (\r\n                <div id=\"viewOldCurriculumIframe\" style={{top: StyleTop}}>\r\n                    <DataGrid columns={columns} rows={rows}/>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        let projectedScreen = (\r\n            <div className=\"iframeContent\">\r\n                <h1 style={{fontSize: \"3vmin\"}}>Load Curriculum for: {this.props.classCode}</h1>\r\n                <div style={{width: \"100%\", alignContent: \"center\"}}>\r\n                    {dropMenu}\r\n                </div>\r\n                {curriculumButtonDiv}\r\n                {viewIframe}\r\n            </div>\r\n        );\r\n\r\n        if(this.state.taskWindow) {\r\n            projectedScreen = (\r\n                <TaskListOptionScreen loadOld={true} currentCurriculum={this.state.openOption.label}\r\n                changeToConfirm={this.props.changeToConfirm} classDetails={this.state.classDetails}/>\r\n            );\r\n        }\r\n        return projectedScreen;\r\n    }\r\n}","import React from 'react';\r\nimport '../iframeStyles.css';\r\nimport CreateNewCurriculum from './CreateNewCurriculum.jsx';\r\nimport LoadOldCurriculum from './LoadOldCurriculum.jsx';\r\n\r\nexport default class CreateClassIframe extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            classCode: props.classCode,\r\n            startYear: props.startYear,\r\n            endYear: props.endYear,\r\n            semester: props.semester,\r\n            iframeWindow: 0,\r\n            confirmScreen: false,\r\n            classDetails: null,\r\n        }\r\n    }\r\n\r\n    apdateHomeValues() {\r\n        let classCodeValue = document.getElementById(\"classCodeBox\").value;\r\n        if(classCodeValue === \"\")\r\n            this.props.changeProps(\"classCode\", null);\r\n        else\r\n            this.props.changeProps(\"classCode\", classCodeValue);\r\n\r\n        let startYearValue = document.getElementById(\"startYearBox\").value;\r\n        if(startYearValue === \"\")\r\n            this.props.changeProps(\"startYear\", null);\r\n        else\r\n            this.props.changeProps(\"startYear\", startYearValue);\r\n\r\n        let endYearValue = document.getElementById(\"endYearBox\").value;\r\n        if(endYearValue === \"\")\r\n            this.props.changeProps(\"endYear\", null);\r\n        else\r\n            this.props.changeProps(\"endYear\", endYearValue);\r\n\r\n        let semesterValue = document.getElementById(\"semesterBox\").value;\r\n        if(semesterValue === \"\")\r\n            this.props.changeProps(\"semester\", null);\r\n        else\r\n            this.props.changeProps(\"semester\", semesterValue);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.apdateHomeValues();\r\n    }\r\n\r\n    render() {\r\n        \r\n        let classCodeInitValue = \"ICS4U-01\";\r\n        let startYearInitValue = \"2019\";\r\n        let endYearInitValue = \"2020\";\r\n        let semesterInitValue = \"2\";\r\n        \r\n        //let classCodeInitValue, startYearInitValue, endYearInitValue, semesterInitValue = null;\r\n\r\n        if(this.state.classCode) {\r\n            classCodeInitValue = this.state.classCode;\r\n            this.setState({classCode: null});\r\n        }\r\n        \r\n        if(this.state.startYear) {\r\n            startYearInitValue = this.state.startYear;\r\n            this.setState({startYear: null});\r\n        }\r\n\r\n        if(this.state.endYear) {\r\n            endYearInitValue = this.state.endYear;\r\n            this.setState({endYear: null});\r\n        }\r\n\r\n        if(this.state.semester) {\r\n            semesterInitValue = this.state.semester;\r\n            this.setState({semester: null});\r\n        }\r\n\r\n        let bottomHalf = null;\r\n        let curriculumText = (<h4>Please select a curriculum option:</h4>);\r\n        if(!this.state.confirmScreen) {\r\n            bottomHalf = (\r\n                    <div className = \"buttonDiv\" id=\"curriculumButtonDiv\">\r\n                        <button className=\"textBox curriculumButton\" id=\"CreateCurriculumButton\"\r\n                        onClick={() => this.CreateCurriculum()}>Create Curriculum</button>\r\n                        \r\n                        <button className=\"textBox curriculumButton\" id=\"OldCurriculumButton\"\r\n                        onClick={() => this.LoadOldCurriculum()}>Use Old Curriculum</button>\r\n                    </div>\r\n            );\r\n        } else {\r\n            curriculumText = (\r\n                <div>\r\n                    <h2>Curriculum Selected: {this.state.classDetails.curriculum}</h2>\r\n                    <h2>Task List Selected: {this.state.classDetails.taskList}</h2>\r\n                </div>\r\n            );\r\n            bottomHalf = (\r\n                <div className = \"buttonDiv\" id=\"curriculumButtonDiv\">\r\n                    <br/>\r\n                    <button className=\"textBox curriculumButton\" id=\"saveClassSettings\" onClick={() => {this.saveConfirm(this)}}>Save</button>\r\n                    <button className=\"textBox curriculumButton\" id=\"cancelClassSettings\" onClick={() => {this.cancelConfirm(this)}}>Cancel</button>\r\n                </div>\r\n        );\r\n        }\r\n\r\n        let createClassHomeIframe = (\r\n            <div className=\"iframeContent\">\r\n                <h1>Create Class</h1>\r\n                <h4>Please enter class code in the following format:</h4>\r\n                <div className=\"textBoxDiv\" id=\"classCodeDiv\">\r\n                    <input type=\"text\" className=\"textBox\" id=\"classCodeBox\" placeholder=\"ICS4U-01\" value={classCodeInitValue}\r\n                    onChange={() => this.apdateHomeValues()}/>\r\n                </div>\r\n                <br/>\r\n                <h4>Please enter school year in the designated textboxes:</h4>\r\n                <div className=\"textBoxDiv\" id=\"yearDateDiv\">\r\n                    <input type=\"text\" className=\"textBox yearDateTextBox\" id=\"startYearBox\" placeholder=\"Start Year (2019)\"\r\n                    value={startYearInitValue} onChange={() => this.apdateHomeValues()} />\r\n                    \r\n                    <input type=\"text\" className=\"textBox yearDateTextBox\" id=\"endYearBox\" placeholder=\"End Year (2020)\"\r\n                    value={endYearInitValue} onChange={() => this.apdateHomeValues()} />\r\n                    \r\n                    <input type=\"text\" className=\"textBox yearDateTextBox\" id=\"semesterBox\" placeholder=\"Semester (1 or 2)\"\r\n                    value={semesterInitValue} onChange={() => this.apdateHomeValues()} />\r\n                </div>\r\n                <br/>\r\n                <br/>\r\n                {curriculumText}\r\n                {bottomHalf}\r\n            </div>\r\n        );\r\n\r\n        const classDetails = {code: this.props.classCode, start: this.props.startYear, end: this.props.endYear, semester :this.props.semester};\r\n\r\n        let createCurriculumIframe = (\r\n                <CreateNewCurriculum classCode={this.props.classCode? this.props.classCode : \"Class Code Not Given\"}\r\n                changeToConfirm={this.changeToConfirm.bind(this)} classDetails={classDetails}/>\r\n        );\r\n\r\n        let loadOldCurriculumIframe = (\r\n            <div className=\"iframeContent\">\r\n                <LoadOldCurriculum classCode={this.props.classCode? this.props.classCode : \"Class Code Not Given\"}\r\n                changeToConfirm={this.changeToConfirm.bind(this)} classDetails={classDetails}/>\r\n            </div>\r\n        );\r\n        let iframeCurrentWindow = createClassHomeIframe;\r\n        if(this.state.iframeWindow === 1)\r\n            iframeCurrentWindow = createCurriculumIframe;\r\n        else if(this.state.iframeWindow === 2)\r\n            iframeCurrentWindow = loadOldCurriculumIframe;\r\n\r\n        return(\r\n            iframeCurrentWindow \r\n        )\r\n    }\r\n    /*\r\n    state.iframeWindow\r\n    0: main window\r\n    1: create curriculum\r\n    2: old curriculum\r\n    */\r\n    CreateCurriculum() {\r\n        let arrayOfErrors = [];\r\n        let arrayOfLife = [\r\n            document.getElementById(\"classCodeBox\"), document.getElementById(\"startYearBox\"),\r\n            document.getElementById(\"endYearBox\"), document.getElementById(\"semesterBox\")\r\n        ];\r\n\r\n        for (let i = 0; i < arrayOfLife.length; i++) {\r\n            if(arrayOfLife[i].value === null)\r\n                arrayOfErrors.push(arrayOfLife[i]);\r\n            else if(arrayOfLife[i].value.replace(/\\s/g, \"\") === \"\")\r\n                arrayOfErrors.push(arrayOfLife[i]);\r\n        }\r\n        if(arrayOfErrors.length !== 0) {\r\n            console.log(\"PLEASE FILL IN ALL INFORMATION\");\r\n        }\r\n        else\r\n            this.setState({iframeWindow: 1});\r\n    }\r\n\r\n    LoadOldCurriculum() {\r\n        this.setState({iframeWindow: 2});\r\n    }\r\n\r\n    changeToConfirm(classDetails) {\r\n        this.setState({iframeWindow: 0, confirmScreen: true, classDetails: classDetails, classCode: classDetails.code,\r\n            startYear: classDetails.start, endYear: classDetails.end, semester: classDetails.semester});\r\n    }\r\n\r\n    cancelConfirm() {\r\n        this.setState({confirmScreen: false});\r\n    }\r\n\r\n    saveConfirm() {\r\n        alert(\"SAVE NOT IMPLEMENTED YET\");\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nexport default class CurrentClassIframe extends React.Component {\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <h1>Current Classes</h1>\r\n                <h2>Feature not yet installed</h2>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nexport default class PastClassIframe extends React.Component {\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <h1>Past Classes</h1>\r\n                <h2>Feature not yet installed</h2>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport './homeScreenStyles.css';\r\nimport CreateClassIframe from './iframe/createClassIframeComponents/CreateClassIframe.jsx';\r\nimport CurrentClassIframe from './iframe/currentClassIframeComponents/CurrentClassIframe.jsx';\r\nimport PastClassIframe from './iframe/pastClassIframeComponents/PastClassIframe.jsx';\r\n//import Button from '@material-ui/core/Button';\r\n\r\nexport default class HomeScreen extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            iframeButtonControl: null,\r\n            createClass_ClassCode: null,\r\n            createClass_startYear: null,\r\n            createClass_endYear: null,\r\n            createClass_semester: null,\r\n            createClass_curriculum: null,\r\n            createClass_taskList: null,\r\n            home: this,\r\n        }\r\n    }\r\n\r\n    buttonClicked(buttonNumber) {\r\n        let that = this;\r\n        //moves buttons and loads iframe\r\n        let buttonList = document.body.getElementsByClassName(\"homeButton\");\r\n        const destinationXpoint = window.innerWidth / 10;\r\n        \r\n        var id = setInterval(frame, 5);\r\n        function frame() {\r\n            let myFrame = document.body.getElementsByClassName(\"mainIframe\")[0];\r\n            for (let buttonIndex = 0; buttonIndex < buttonList.length; buttonIndex++) {\r\n                let button = buttonList[buttonIndex];\r\n                /***MOVES BUTTONS LEFT***/\r\n                if(button.getBoundingClientRect().x < destinationXpoint) {\r\n                    clearInterval(id);\r\n                } else {\r\n                    button.style.left = (button.getBoundingClientRect().x - 3).toString() + \"px\";\r\n                }\r\n                /***FADE IN IFRAME***/\r\n                let alpha = that.getAlpha(getComputedStyle(document.body.getElementsByClassName(\"mainIframe\")[0]).backgroundColor);\r\n                if(alpha < 1) {\r\n                    myFrame.style.backgroundColor = \"rgba(245,245,245,\"+((parseFloat(alpha) + 0.005).toString())+\")\";\r\n                    myFrame.style.color = \"rgba(0,0,0,\"+((parseFloat(alpha) + 0.005).toString())+\")\";\r\n                }\r\n            }\r\n        }\r\n        //loads iframe depends on what button was pressed\r\n        this.loadIframe(buttonNumber);\r\n    }\r\n\r\n    changeProps(prop, value) {\r\n        if(prop === \"classCode\") {\r\n            this.setState({createClass_ClassCode: value});\r\n        } else if(prop === \"startYear\") {\r\n            this.setState({createClass_startYear: value});\r\n        } else if(prop === \"endYear\") {\r\n            this.setState({createClass_endYear: value});\r\n        } else if(prop === \"semester\") {\r\n            this.setState({createClass_semester: value});\r\n        }\r\n    }\r\n\r\n    getAlpha(string) {\r\n        let split1 = null;\r\n        let split2 = null;\r\n        let split3 = null;\r\n        for (let i = 0; i < string.length; i++) {\r\n           if (string.substring(i, i+1) === ',') {\r\n              if (split1 === null) {\r\n                 split1 = i;\r\n              } else if(split2 === null) {\r\n                 split2 = i;\r\n              } else {//slpit 3\r\n                 split3 = i;\r\n                 break;\r\n              }\r\n           }\r\n        }\r\n        if(split3 === null){//rgb instead of rgba\r\n           return 1;\r\n        }\r\n        let alpha = null;\r\n        for (let i = split3; i < string.length; i++) {\r\n           if(string.substring(i, i+1) === ')') {\r\n              alpha = string.substring(split3+2, i);\r\n              break;\r\n           }\r\n        }\r\n        return parseFloat(alpha);\r\n     }\r\n\r\n     loadIframe(buttonNumber) {\r\n        this.setState({iframeButtonControl: buttonNumber});\r\n     }\r\n\r\n    render() {\r\n        let button0State = this.state.iframeButtonControl === 0? \"homeButton boldButton\" : \"homeButton unboldenButton\";\r\n        let button1State = this.state.iframeButtonControl === 1? \"homeButton boldButton\" : \"homeButton unboldenButton\";\r\n        let button2State = this.state.iframeButtonControl === 2? \"homeButton boldButton\" : \"homeButton unboldenButton\";\r\n        let iframeContent;\r\n        if(this.state.iframeButtonControl === 0) {\r\n            iframeContent = <CurrentClassIframe />\r\n        } else if (this.state.iframeButtonControl === 1) {\r\n            iframeContent = <CreateClassIframe\r\n                classCode={this.state.createClass_ClassCode}\r\n                startYear={this.state.createClass_startYear}\r\n                endYear={this.state.createClass_endYear}\r\n                semester={this.state.createClass_semester}\r\n                changeProps={this.changeProps.bind(this)}\r\n            />;\r\n        } else if (this.state.iframeButtonControl === 2) {\r\n            iframeContent = <PastClassIframe />;\r\n        }\r\n        \r\n        return (\r\n            <div>\r\n                <div className=\"mainIframe\">\r\n                    {iframeContent}\r\n                </div>\r\n                <input type=\"button\" className={button0State} value=\"Current Classes\"\r\n                style={{top: ((window.innerHeight / 4) - (window.innerHeight / 20)).toString() + \"px\"}}\r\n                onClick={() => this.buttonClicked(0)}/>\r\n                <input type=\"button\" className={button1State} value=\"Create Class\"\r\n                style={{top: ((window.innerHeight / 2) - (window.innerHeight / 20)).toString() + \"px\"}}\r\n                onClick={() => this.buttonClicked(1)}/>\r\n                <input type=\"button\" className={button2State} value=\"Past Classes\"\r\n                style={{top: ((window.innerHeight * 3/ 4) - (window.innerHeight / 20)).toString() + \"px\"}}\r\n                onClick={() => this.buttonClicked(2)}/>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport './App.css';\r\n//import {BrowserRouter as Router, Switch, Route, Link} from \"react-router-dom\";\r\nimport HomeScreen from './components/home/HomeScreen.jsx';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      {/*<p>hello darkness my old friend</p>\r\n      <Router>\r\n        <nav>\r\n          <ul>\r\n            <li>\r\n              <Link to=\"/about\">About</Link>\r\n            </li>\r\n          </ul>\r\n        </nav>\r\n        <Switch>\r\n          <Route path=\"/about\">\r\n            <HomeScreen />\r\n          </Route>\r\n        </Switch>\r\n      </Router>*/}\r\n      <HomeScreen />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}