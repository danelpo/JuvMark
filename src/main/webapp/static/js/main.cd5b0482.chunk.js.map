{"version":3,"sources":["components/home/iframe/CreateClassIframe.jsx","components/home/iframe/CurrentClassIframe.jsx","components/home/iframe/PastClassIframe.jsx","components/home/HomeScreen.jsx","App.js","serviceWorker.js","index.js"],"names":["CreateClassIframe","React","Component","CurrentClassIframe","PastClassIframe","HomeScreen","props","state","iframeButtonControl","buttonNumber","that","this","buttonList","document","body","getElementsByClassName","destinationXpoint","window","innerWidth","id","setInterval","myFrame","buttonIndex","length","button","getBoundingClientRect","x","clearInterval","style","left","toString","alpha","getAlpha","getComputedStyle","backgroundColor","parseFloat","color","loadIframe","string","split1","split2","split3","i","substring","setState","iframeContent","className","type","value","top","innerHeight","onClick","buttonClicked","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.cd5b0482.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default class CreateClassIframe extends React.Component {\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <h1>Create Class</h1>\r\n                <h2>Feature will soon be installed</h2>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nexport default class CurrentClassIframe extends React.Component {\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <h1>Current Classes</h1>\r\n                <h2>Feature not yet installed</h2>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nexport default class PastClassIframe extends React.Component {\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <h1>Past Classes</h1>\r\n                <h2>Feature not yet installed</h2>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport './homeScreenStyles.css';\r\nimport CreateClassIframe from './iframe/CreateClassIframe.jsx';\r\nimport CurrentClassIframe from './iframe/CurrentClassIframe.jsx';\r\nimport PastClassIframe from './iframe/PastClassIframe.jsx';\r\n\r\nexport default class HomeScreen extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            iframeButtonControl: null,\r\n        }\r\n    }\r\n\r\n    buttonClicked(buttonNumber) {\r\n        let that = this;\r\n        //moves buttons and loads iframe\r\n        let buttonList = document.body.getElementsByClassName(\"homeButton\");\r\n        const destinationXpoint = window.innerWidth / 10;\r\n        \r\n        var id = setInterval(frame, 5);\r\n        function frame() {\r\n            let myFrame = document.body.getElementsByClassName(\"mainIframe\")[0];\r\n            for (let buttonIndex = 0; buttonIndex < buttonList.length; buttonIndex++) {\r\n                let button = buttonList[buttonIndex];\r\n                /***MOVES BUTTONS LEFT***/\r\n                if(button.getBoundingClientRect().x < destinationXpoint) {\r\n                    clearInterval(id);\r\n                } else {\r\n                    button.style.left = (button.getBoundingClientRect().x - 3).toString() + \"px\";\r\n                }\r\n                /***FADE IN IFRAME***/\r\n                let alpha = that.getAlpha(getComputedStyle(document.body.getElementsByClassName(\"mainIframe\")[0]).backgroundColor);\r\n                if(alpha < 1) {\r\n                    myFrame.style.backgroundColor = \"rgba(245,245,245,\"+((parseFloat(alpha) + 0.005).toString())+\")\";\r\n                    myFrame.style.color = \"rgba(0,0,0,\"+((parseFloat(alpha) + 0.005).toString())+\")\";\r\n                }\r\n            }\r\n        }\r\n        //loads iframe depends on what button was pressed\r\n        this.loadIframe(buttonNumber);\r\n    }\r\n\r\n    getAlpha(string) {\r\n        let split1 = null;\r\n        let split2 = null;\r\n        let split3 = null;\r\n        for (let i = 0; i < string.length; i++) {\r\n           if (string.substring(i, i+1) === ',') {\r\n              if (split1 === null) {\r\n                 split1 = i;\r\n              } else if(split2 === null) {\r\n                 split2 = i;\r\n              } else {//slpit 3\r\n                 split3 = i;\r\n                 break;\r\n              }\r\n           }\r\n        }\r\n        if(split3 === null){//rgb instead of rgba\r\n           return 1;\r\n        }\r\n        let alpha = null;\r\n        for (let i = split3; i < string.length; i++) {\r\n           if(string.substring(i, i+1) === ')') {\r\n              alpha = string.substring(split3+2, i);\r\n              break;\r\n           }\r\n        }\r\n        return parseFloat(alpha);\r\n     }\r\n\r\n     loadIframe(buttonNumber) {\r\n        this.setState({iframeButtonControl: buttonNumber});\r\n     }\r\n\r\n    render() {\r\n        let iframeContent;\r\n        if(this.state.iframeButtonControl === 0) {\r\n            iframeContent = <CurrentClassIframe />\r\n        } else if (this.state.iframeButtonControl === 1) {\r\n            iframeContent = <CreateClassIframe />;\r\n        } else if (this.state.iframeButtonControl) {\r\n            iframeContent = <PastClassIframe />;\r\n        }\r\n        return (\r\n            <div>\r\n                <div className=\"mainIframe\">\r\n                    {iframeContent}\r\n                </div>\r\n                <input type=\"button\" className=\"homeButton\" value=\"Current Classes\"\r\n                style={{top: ((window.innerHeight / 4) - (window.innerHeight / 20)).toString() + \"px\"}}\r\n                onClick={() => this.buttonClicked(0)}/>\r\n                <input type=\"button\" className=\"homeButton\" value=\"Create Class\"\r\n                style={{top: ((window.innerHeight / 2) - (window.innerHeight / 20)).toString() + \"px\"}}\r\n                onClick={() => this.buttonClicked(1)}/>\r\n                <input type=\"button\" className=\"homeButton\" value=\"Past Classes\"\r\n                style={{top: ((window.innerHeight * 3/ 4) - (window.innerHeight / 20)).toString() + \"px\"}}\r\n                onClick={() => this.buttonClicked(2)}/>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport './App.css';\n//import {BrowserRouter as Router, Switch, Route, Link} from \"react-router-dom\";\nimport HomeScreen from './components/home/HomeScreen.jsx';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/*<p>hello darkness my old friend</p>\n      <Router>\n        <nav>\n          <ul>\n            <li>\n              <Link to=\"/about\">About</Link>\n            </li>\n          </ul>\n        </nav>\n        <Switch>\n          <Route path=\"/about\">\n            <HomeScreen />\n          </Route>\n        </Switch>\n      </Router>*/}\n      <HomeScreen />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}