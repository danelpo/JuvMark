{"version":3,"sources":["components/home/iframe/CreateClassIframe.jsx","components/home/iframe/CurrentClassIframe.jsx","components/home/iframe/PastClassIframe.jsx","components/home/HomeScreen.jsx","App.js","serviceWorker.js","index.js"],"names":["CreateClassIframe","React","Component","CurrentClassIframe","PastClassIframe","HomeScreen","props","state","iframeButtonControl","buttonNumber","that","this","buttonList","document","body","getElementsByClassName","destinationXpoint","window","innerWidth","id","setInterval","myFrame","buttonIndex","length","button","getBoundingClientRect","x","clearInterval","style","left","toString","alpha","getAlpha","getComputedStyle","backgroundColor","parseFloat","color","loadIframe","string","split1","split2","split3","i","substring","setState","iframeContent","className","type","value","top","innerHeight","onClick","buttonClicked","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7cc3f75f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default class CreateClassIframe extends React.Component {\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <h1>Create Class</h1>\r\n                <h2>Feature will soon be installed</h2>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nexport default class CurrentClassIframe extends React.Component {\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <h1>Current Classes</h1>\r\n                <h2>Feature not yet installed</h2>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nexport default class PastClassIframe extends React.Component {\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <h1>Past Classes</h1>\r\n                <h2>Feature not yet installed</h2>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport './homeScreenStyles.css';\r\nimport CreateClassIframe from './iframe/CreateClassIframe.jsx';\r\nimport CurrentClassIframe from './iframe/CurrentClassIframe.jsx';\r\nimport PastClassIframe from './iframe/PastClassIframe.jsx';\r\n\r\nexport default class HomeScreen extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            iframeButtonControl: null,\r\n        }\r\n    }\r\n\r\n    buttonClicked(buttonNumber) {\r\n        let that = this;\r\n        //moves buttons and loads iframe\r\n        let buttonList = document.body.getElementsByClassName(\"homeButton\");\r\n        const destinationXpoint = window.innerWidth / 10;\r\n        \r\n        var id = setInterval(frame, 5);\r\n        function frame() {\r\n            let myFrame = document.body.getElementsByClassName(\"mainIframe\")[0];\r\n            for (let buttonIndex = 0; buttonIndex < buttonList.length; buttonIndex++) {\r\n                let button = buttonList[buttonIndex];\r\n                /***MOVES BUTTONS LEFT***/\r\n                if(button.getBoundingClientRect().x < destinationXpoint) {\r\n                    clearInterval(id);\r\n                } else {\r\n                    button.style.left = (button.getBoundingClientRect().x - 3).toString() + \"px\";\r\n                }\r\n                /***FADE IN IFRAME***/\r\n                let alpha = that.getAlpha(getComputedStyle(document.body.getElementsByClassName(\"mainIframe\")[0]).backgroundColor);\r\n                if(alpha < 1) {\r\n                    myFrame.style.backgroundColor = \"rgba(245,245,245,\"+((parseFloat(alpha) + 0.005).toString())+\")\";\r\n                    myFrame.style.color = \"rgba(0,0,0,\"+((parseFloat(alpha) + 0.005).toString())+\")\";\r\n                }\r\n            }\r\n        }\r\n        //loads iframe depends on what button was pressed\r\n        this.loadIframe(buttonNumber);\r\n    }\r\n\r\n    getAlpha(string) {\r\n        let split1 = null;\r\n        let split2 = null;\r\n        let split3 = null;\r\n        for (let i = 0; i < string.length; i++) {\r\n           if (string.substring(i, i+1) === ',') {\r\n              if (split1 === null) {\r\n                 split1 = i;\r\n              } else if(split2 === null) {\r\n                 split2 = i;\r\n              } else {//slpit 3\r\n                 split3 = i;\r\n                 break;\r\n              }\r\n           }\r\n        }\r\n        if(split3 === null){//rgb instead of rgba\r\n           return 1;\r\n        }\r\n        let alpha = null;\r\n        for (let i = split3; i < string.length; i++) {\r\n           if(string.substring(i, i+1) === ')') {\r\n              alpha = string.substring(split3+2, i);\r\n              break;\r\n           }\r\n        }\r\n        return parseFloat(alpha);\r\n     }\r\n\r\n     loadIframe(buttonNumber) {\r\n        this.setState({iframeButtonControl: buttonNumber});\r\n     }\r\n\r\n    render() {\r\n        let iframeContent;\r\n        if(this.state.iframeButtonControl === 0) {\r\n            iframeContent = <CurrentClassIframe />\r\n        } else if (this.state.iframeButtonControl === 1) {\r\n            iframeContent = <CreateClassIframe />;\r\n        } else if (this.state.iframeButtonControl) {\r\n            iframeContent = <PastClassIframe />;\r\n        }\r\n        return (\r\n            <div>\r\n                <div className=\"mainIframe\">\r\n                    {iframeContent}\r\n                </div>\r\n                <input type=\"button\" className=\"homeButton\" value=\"Current Classes\"\r\n                style={{top: ((window.innerHeight / 4) - (window.innerHeight / 20)).toString() + \"px\"}}\r\n                onClick={() => this.buttonClicked(0)}/>\r\n                <input type=\"button\" className=\"homeButton\" value=\"Create Class\"\r\n                style={{top: ((window.innerHeight / 2) - (window.innerHeight / 20)).toString() + \"px\"}}\r\n                onClick={() => this.buttonClicked(1)}/>\r\n                <input type=\"button\" className=\"homeButton\" value=\"Past Classes\"\r\n                style={{top: ((window.innerHeight * 3/ 4) - (window.innerHeight / 20)).toString() + \"px\"}}\r\n                onClick={() => this.buttonClicked(2)}/>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport './App.css';\r\n//import {BrowserRouter as Router, Switch, Route, Link} from \"react-router-dom\";\r\nimport HomeScreen from './components/home/HomeScreen.jsx';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      {/*<p>hello darkness my old friend</p>\r\n      <Router>\r\n        <nav>\r\n          <ul>\r\n            <li>\r\n              <Link to=\"/about\">About</Link>\r\n            </li>\r\n          </ul>\r\n        </nav>\r\n        <Switch>\r\n          <Route path=\"/about\">\r\n            <HomeScreen />\r\n          </Route>\r\n        </Switch>\r\n      </Router>*/}\r\n      <HomeScreen />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}