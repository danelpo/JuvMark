{"version":3,"sources":["components/home/iframe/createClassIframeComponents/CreateNewCurriculum.jsx","components/home/iframe/createClassIframeComponents/TaskListOptionScreen.jsx","components/home/iframe/createClassIframeComponents/LoadOldCurriculum.jsx","components/home/iframe/createClassIframeComponents/CreateClassIframe.jsx","components/home/iframe/currentClassIframeComponents/CurrentClassIframe.jsx","components/home/iframe/pastClassIframeComponents/PastClassIframe.jsx","components/home/HomeScreen.jsx","App.js","serviceWorker.js","index.js"],"names":["CreateNewCurriculum","props","courseCodeFromClassCode","classCode","i","length","substring","validateCurriculumName","curriculumPureName","state","allCurriculumsArray","getTest","fetch","then","Response","json","message","setState","data","method","mode","cache","credentials","headers","redirect","referrerPolicy","body","JSON","stringify","axios","post","name","age","grade","highSchool","response","console","log","pureCurriculumName","this","classDetails","code","start","end","proposedCurriculumName","className","React","Component","TaskListOptionScreen","handleChange","selectedOption","openOption","curriculumName","label","Respone","curriculumTaskListTasks","options","optionArray","curriculumTaskList","map","taskName","push","value","getRowsForTask","myRows","myRawRows","myLessRawButStillRawRows","myLessRawRows","task","taskNumber","TaskNumber","expectations","arrayToString","Curriculums","taskDesc","Description","array","myString","parseInt","cancelTaskView","bringToConfirmHomeScreen","newJsonObject","taskList","changeToConfirm","forceToCreate","currentCurriculum","curriculumObject","selectOldTaskListState","optionMenu","taskTable","optionButtons","onChange","rows","DataGrid","columns","key","id","onClick","document","getElementById","disabled","selectOldTaskListFunction","LoadOldCurriculum","viewMode","allCurriculums","viewCurriculum","Message","curriculumExpectations","saveCurriculum","curriculum","taskWindow","dropMenu","curriculumButtonDiv","viewIframe","StyleTop","getBoundingClientRect","bottom","toString","cur","expectation","CurriculumNumber","description","style","top","projectedScreen","fontSize","width","alignContent","loadOld","CreateClassIframe","startYear","endYear","semester","iframeWindow","confirmScreen","classCodeValue","changeProps","startYearValue","endYearValue","semesterValue","classCodeInitValue","startYearInitValue","endYearInitValue","semesterInitValue","bottomHalf","curriculumText","saveConfirm","cancelConfirm","CreateCurriculum","createClassHomeIframe","type","placeholder","apdateHomeValues","createCurriculumIframe","bind","loadOldCurriculumIframe","iframeCurrentWindow","alert","CurrentClassIframe","PastClassIframe","HomeScreen","iframeButtonControl","createClass_ClassCode","createClass_startYear","createClass_endYear","createClass_semester","createClass_curriculum","createClass_taskList","home","buttonNumber","that","buttonList","getElementsByClassName","destinationXpoint","window","innerWidth","setInterval","myFrame","buttonIndex","button","x","clearInterval","left","alpha","getAlpha","getComputedStyle","backgroundColor","parseFloat","color","loadIframe","prop","string","split1","split2","split3","iframeContent","button0State","button1State","button2State","innerHeight","buttonClicked","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.b04c13e3.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../iframeStyles.css';\r\nimport axios from 'axios';\r\n\r\nexport default class CreateNewCurriculum extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            allCurriculumsArray: null,\r\n        }\r\n    }\r\n    \r\n    courseCodeFromClassCode = classCode => {\r\n        if (!classCode) return;\r\n        for(let i = 0; i < classCode.length; i++) {\r\n            if(classCode.substring(i, i+1) === '-') {\r\n                return classCode.substring(0, i);\r\n            }\r\n        }\r\n        return classCode;\r\n    }\r\n\r\n    validateCurriculumName = curriculumPureName => {\r\n        if(this.state.allCurriculumsArray) {\r\n            let allCurriculums = this.state.allCurriculumsArray;\r\n            let allCurriculumsPureNames = [];\r\n            //console.log(allCurriculums);\r\n            //console.log(allCurriculums.includes(curriculumPureName)? \"Curriculum exists\" : \"New Curriculum\");\r\n        }\r\n        return curriculumPureName;\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('http://localhost:8080/api/data/curriculum').then(Response => {return Response.json()}).then(message => {this.setState({allCurriculumsArray: message})});        \r\n    }\r\n\r\n    async postData(data = {}) {\r\n        const Response = await fetch('http://localhost:8080/api/data/user', {\r\n            method: 'POST',\r\n            mode: 'cors',\r\n            cache: 'no-cache',\r\n            credentials: 'include',\r\n            headers: {\r\n                'Access-Control-Allow-Origin': 'http://localhost:3000'\r\n            },\r\n            redirect: 'follow',\r\n            referrerPolicy: 'no-referrer',\r\n            body: JSON.stringify(data)\r\n        });\r\n        return Response.json();\r\n    }\r\n\r\n    getTest = () => {\r\n        fetch('http://localhost:8080/api/data/curriculum/ICS4U_2019-2020_2/tasks/ICS4U_2019-2020_2/T1').then(Response => {return Response.json()}).then(message => {\r\n            //console.log(message);\r\n        })\r\n    }\r\n\r\n    render() {\r\n        //this.getTest();\r\n        const testInformation = {\r\n            name: \"Danel Polyakov\",\r\n            age: \"17\",\r\n            grade: \"12\",\r\n            highSchool: \"Earl of March\"\r\n        };\r\n        axios.post(\"http://localhost:8080/api/data/user\", testInformation).then(response => {console.log(response)});\r\n        let courseCode = this.courseCodeFromClassCode(this.props.classDetails.code);\r\n        let pureCurriculumName = courseCode + \"_\" + this.props.classDetails.start + \"-\" + this.props.classDetails.end;\r\n        //console.log(pureCurriculumName);\r\n        let proposedCurriculumName = this.validateCurriculumName(pureCurriculumName);\r\n        return(\r\n            <div className=\"iframeContent\">\r\n                <h1>Create Curriculum for: {this.props.classCode}</h1>\r\n                <h2>Creating Curriculum: {proposedCurriculumName}</h2>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport DataGrid from 'react-data-grid';\r\nimport Select from 'react-select';\r\nimport '../iframeStyles.css';\r\n\r\nexport default class TaskListOptionScreen extends React.Component {\r\n    //props loadOld if false: creating new, hide select old task list\r\n    //props currentCurriculum: the curriculum that we are selecting the tasks for.\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            forceToCreate: false,\r\n            curriculumName: this.props.currentCurriculum,\r\n            curriculumObject: null,\r\n            curriculumTaskList: [],\r\n            openOption: null,\r\n            curriculumTaskListTasks: null,\r\n            selectOldTaskListState: false,\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('http://localhost:8080/api/data/curriculum/' + this.state.curriculumName).then(Response => {return Response.json()}).then(message => {\r\n            this.setState({curriculumObject: message})});\r\n        fetch('http://localhost:8080/api/data/curriculum/' + this.state.curriculumName + '/tasks').then(Response => {return Response.json()}).then(message => {\r\n            this.setState({curriculumTaskList: message})});\r\n    }\r\n\r\n    selectOldTaskListFunction() {\r\n        this.setState({selectOldTaskListState: true});\r\n    }\r\n\r\n    handleChange = selectedOption => {\r\n        this.setState({openOption: selectedOption});\r\n        fetch('http://localhost:8080/api/data/curriculum/' + this.state.curriculumName + '/tasks/' + selectedOption.label).then(Respone => {return Respone.json()}).then(message => {\r\n            this.setState({curriculumTaskListTasks: message})});\r\n\r\n    }\r\n\r\n    options = () => {\r\n        let optionArray = [];\r\n        this.state.curriculumTaskList.map(taskName => (optionArray.push({value: taskName, label: taskName})));\r\n        return optionArray;\r\n    }\r\n\r\n    getRowsForTask = () => {\r\n        let myRows = [];\r\n        if(this.state.curriculumTaskListTasks) {\r\n            let myRawRows = [];\r\n            for(let i in this.state.curriculumTaskListTasks) {\r\n                myRawRows.push([i, this.state.curriculumTaskListTasks[i]]);\r\n            }\r\n            let myLessRawButStillRawRows = myRawRows[0][1];\r\n            let myLessRawRows = [];\r\n            for(let i in myLessRawButStillRawRows) {\r\n                myLessRawRows.push(myLessRawButStillRawRows[i]);\r\n            }\r\n            myLessRawRows.map(task => (myRows.push({taskNumber: task.TaskNumber, expectations: this.arrayToString(task.Curriculums), taskDesc: task.Description})))\r\n        }\r\n        return myRows;\r\n    }\r\n    \r\n    arrayToString = array => {\r\n        let myString = \"\";\r\n        for(let i in array) {\r\n            myString = myString + array[i];\r\n            if(parseInt(i) + 1 !== array.length) {\r\n                myString = myString + \", \"; \r\n            }\r\n        }\r\n        return myString;\r\n    }\r\n\r\n    cancelTaskView = () => {\r\n        this.setState({openOption: null});\r\n    }\r\n\r\n    bringToConfirmHomeScreen = () => {\r\n        let newJsonObject = this.props.classDetails;\r\n        newJsonObject.taskList = this.state.openOption.label;\r\n        this.props.changeToConfirm(newJsonObject);\r\n    }\r\n\r\n    render() {\r\n        let optionMenu, taskTable, optionButtons = null;\r\n        if(this.state.selectOldTaskListState) {\r\n            optionMenu = (\r\n                <Select className=\"loadCurriculumDropDownMenu\" value={this.state.openOption} onChange={this.handleChange} options={this.options()}/>\r\n            );\r\n            \r\n            if(this.state.openOption) {\r\n                const columns = [{key: 'taskNumber', name: 'Task Number'},{key: 'expectations', name: 'Expectations in Curriculum'},{key: 'taskDesc', name: 'Task Description'}];\r\n                let rows = this.getRowsForTask();\r\n                taskTable = (\r\n                    <div className=\"selectOldTasksDiv\">\r\n                        <DataGrid columns={columns} rows={rows}/>\r\n                    </div>\r\n                );\r\n\r\n                optionButtons = (\r\n                    <div className=\"taskOptionsButtonDiv\">\r\n                            <button className=\"taskOptionButton\" id=\"saveTaskButton\" onClick={() => {this.bringToConfirmHomeScreen(this)}}>Save</button>\r\n                            <button className=\"taskOptionButton\" id=\"cancelTaskButton\" onClick={() => {this.cancelTaskView(this)}}>Cancel</button>\r\n                    </div>\r\n                );\r\n\r\n                document.getElementById(\"selectOldTaskButton\").disabled = true;\r\n                document.getElementById(\"createNewTaskButton\").disabled = true;\r\n            } else {\r\n                document.getElementById(\"selectOldTaskButton\").disabled = false;\r\n                document.getElementById(\"createNewTaskButton\").disabled = false;\r\n            }\r\n        }\r\n        return(\r\n            <div className=\"taskListMainScreen\">\r\n                        <h2>Please select an option for your tasks</h2>\r\n                        <h4>Tasks include all tests, quizzes, asignments and evaluations</h4>\r\n                        <br/>\r\n                        <div className=\"taskOptionsButtonDiv\">\r\n                            <button className=\"taskOptionButton\" id=\"selectOldTaskButton\" onClick={() => {this.selectOldTaskListFunction(this)}}>Select Old Task List</button>\r\n                            <button className=\"taskOptionButton\" id=\"createNewTaskButton\">Create New Task List</button>\r\n                        </div>\r\n                        <br/>\r\n                        {optionMenu}\r\n                        <br/>\r\n                        {taskTable}\r\n                        <br/>\r\n                        {optionButtons}\r\n                    </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport '../iframeStyles.css';\r\nimport Select from 'react-select';\r\nimport DataGrid from 'react-data-grid';\r\nimport 'react-data-grid/dist/react-data-grid.css';\r\nimport TaskListOptionScreen from './TaskListOptionScreen.jsx';\r\n\r\nexport default class LoadOldCurriculum extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            allCurriculums: null,\r\n            openOption: null,\r\n            viewMode:false,\r\n            curriculumExpectations: null,\r\n            taskWindow: false,\r\n            classDetails: props.classDetails,\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('http://localhost:8080/api/data/curriculum').then(Response => {return Response.json()}).then(Message => {\r\n            this.setState({allCurriculums: Message});});\r\n    }\r\n\r\n    handleChange = selectedOption => {\r\n        this.setState({openOption: selectedOption, viewMode:false});\r\n    }\r\n\r\n    options = () => {\r\n        let optionArray = [];\r\n        this.state.allCurriculums.map(curriculumName => (\r\n            optionArray.push({value: curriculumName, label: curriculumName})));\r\n        return optionArray;\r\n    }\r\n\r\n    viewCurriculum = () => {\r\n        fetch('http://localhost:8080/api/data/curriculum/' + this.state.openOption.label).then(Respone => {return Respone.json()}).then(Message => {\r\n            this.setState({curriculumExpectations: Message.Curriculums});\r\n        });\r\n        this.setState({viewMode:true});\r\n    }\r\n\r\n    saveCurriculum = () => {\r\n        let newJsonObject = this.state.classDetails;\r\n        newJsonObject.curriculum = this.state.openOption.label;\r\n        this.setState({taskWindow:true, classDetails: newJsonObject});\r\n    }\r\n\r\n    render() {\r\n        let dropMenu, curriculumButtonDiv, viewIframe = null;\r\n\r\n        if(this.state.allCurriculums) {\r\n            dropMenu = (<Select className=\"loadCurriculumDropDownMenu\" value={this.state.openOption} onChange={this.handleChange} options={this.options()}/>);\r\n            \r\n            if(this.state.openOption) {\r\n                curriculumButtonDiv = (<div className=\"textBoxDiv\" id=\"optionDropMenuDiv\">\r\n                    <button className=\"textBox oldCurriculumSelectOptionButton\" id=\"oldCurriculumSaveOption\" onClick={this.saveCurriculum}>Save</button>\r\n                    <button className=\"textBox oldCurriculumSelectOptionButton\" id=\"oldCurriculumViewOption\" onClick={this.viewCurriculum}>View</button>\r\n                </div>);\r\n            }\r\n        }\r\n        \r\n        if(this.state.viewMode) {\r\n            let StyleTop = (document.getElementById(\"optionDropMenuDiv\").getBoundingClientRect().bottom + 20).toString() + \"px\";\r\n            const columns = [{ key: 'expectation', name: 'Expectation' },{ key: 'description', name: 'Description' }];\r\n            let rows = [];\r\n            if(this.state.curriculumExpectations) {\r\n                let curriculum = []\r\n                for(var i in this.state.curriculumExpectations)\r\n                    curriculum.push([i, this.state.curriculumExpectations[i]]);\r\n                curriculum.map(cur => (rows.push({expectation: cur[1].CurriculumNumber, description: cur[1].Description})));\r\n            }\r\n            viewIframe = (\r\n                <div id=\"viewOldCurriculumIframe\" style={{top: StyleTop}}>\r\n                    <DataGrid columns={columns} rows={rows}/>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        let projectedScreen = (\r\n            <div className=\"iframeContent\">\r\n                <h1 style={{fontSize: \"3vmin\"}}>Load Curriculum for: {this.props.classCode}</h1>\r\n                <div style={{width: \"100%\", alignContent: \"center\"}}>\r\n                    {dropMenu}\r\n                </div>\r\n                {curriculumButtonDiv}\r\n                {viewIframe}\r\n            </div>\r\n        );\r\n\r\n        if(this.state.taskWindow) {\r\n            projectedScreen = (\r\n                <TaskListOptionScreen loadOld={true} currentCurriculum={this.state.openOption.label}\r\n                changeToConfirm={this.props.changeToConfirm} classDetails={this.state.classDetails}/>\r\n            );\r\n        }\r\n\r\n        return projectedScreen;\r\n    }\r\n}","import React from 'react';\r\nimport '../iframeStyles.css';\r\nimport CreateNewCurriculum from './CreateNewCurriculum.jsx';\r\nimport LoadOldCurriculum from './LoadOldCurriculum.jsx';\r\n\r\nexport default class CreateClassIframe extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            classCode: props.classCode,\r\n            startYear: props.startYear,\r\n            endYear: props.endYear,\r\n            semester: props.semester,\r\n            iframeWindow: 0,\r\n            confirmScreen: false,\r\n            classDetails: null,\r\n        }\r\n    }\r\n\r\n    apdateHomeValues() {\r\n        let classCodeValue = document.getElementById(\"classCodeBox\").value;\r\n        if(classCodeValue === \"\")\r\n            this.props.changeProps(\"classCode\", null);\r\n        else\r\n            this.props.changeProps(\"classCode\", classCodeValue);\r\n\r\n        let startYearValue = document.getElementById(\"startYearBox\").value;\r\n        if(startYearValue === \"\")\r\n            this.props.changeProps(\"startYear\", null);\r\n        else\r\n            this.props.changeProps(\"startYear\", startYearValue);\r\n\r\n        let endYearValue = document.getElementById(\"endYearBox\").value;\r\n        if(endYearValue === \"\")\r\n            this.props.changeProps(\"endYear\", null);\r\n        else\r\n            this.props.changeProps(\"endYear\", endYearValue);\r\n\r\n        let semesterValue = document.getElementById(\"semesterBox\").value;\r\n        if(semesterValue === \"\")\r\n            this.props.changeProps(\"semester\", null);\r\n        else\r\n            this.props.changeProps(\"semester\", semesterValue);\r\n    }\r\n\r\n    render() {\r\n        let classCodeInitValue, startYearInitValue, endYearInitValue, semesterInitValue = null;\r\n\r\n        if(this.state.classCode) {\r\n            classCodeInitValue = this.state.classCode;\r\n            this.setState({classCode: null});\r\n        }\r\n        \r\n        if(this.state.startYear) {\r\n            startYearInitValue = this.state.startYear;\r\n            this.setState({startYear: null});\r\n        }\r\n\r\n        if(this.state.endYear) {\r\n            endYearInitValue = this.state.endYear;\r\n            this.setState({endYear: null});\r\n        }\r\n\r\n        if(this.state.semester) {\r\n            semesterInitValue = this.state.semester;\r\n            this.setState({semester: null});\r\n        }\r\n\r\n        let bottomHalf = null;\r\n        let curriculumText = (<h4>Please select a curriculum option:</h4>);\r\n        if(!this.state.confirmScreen) {\r\n            bottomHalf = (\r\n                    <div className = \"buttonDiv\" id=\"curriculumButtonDiv\">\r\n                        <button className=\"textBox curriculumButton\" id=\"CreateCurriculumButton\"\r\n                        onClick={() => this.CreateCurriculum()}>Create Curriculum</button>\r\n                        \r\n                        <button className=\"textBox curriculumButton\" id=\"OldCurriculumButton\"\r\n                        onClick={() => this.LoadOldCurriculum()}>Use Old Curriculum</button>\r\n                    </div>\r\n            );\r\n        } else {\r\n            curriculumText = (\r\n                <div>\r\n                    <h2>Curriculum Selected: {this.state.classDetails.curriculum}</h2>\r\n                    <h2>Task List Selected: {this.state.classDetails.taskList}</h2>\r\n                </div>\r\n            );\r\n            bottomHalf = (\r\n                <div className = \"buttonDiv\" id=\"curriculumButtonDiv\">\r\n                    <br/>\r\n                    <button className=\"textBox curriculumButton\" id=\"saveClassSettings\" onClick={() => {this.saveConfirm(this)}}>Save</button>\r\n                    <button className=\"textBox curriculumButton\" id=\"cancelClassSettings\" onClick={() => {this.cancelConfirm(this)}}>Cancel</button>\r\n                </div>\r\n        );\r\n        }\r\n\r\n        let createClassHomeIframe = (\r\n            <div className=\"iframeContent\">\r\n                <h1>Create Class</h1>\r\n                <h4>Please enter class code in the following format:</h4>\r\n                <div className=\"textBoxDiv\" id=\"classCodeDiv\">\r\n                    <input type=\"text\" className=\"textBox\" id=\"classCodeBox\" placeholder=\"ICS4U-01\" value={classCodeInitValue}\r\n                    onChange={() => this.apdateHomeValues()}/>\r\n                </div>\r\n                <br/>\r\n                <h4>Please enter school year in the designated textboxes:</h4>\r\n                <div className=\"textBoxDiv\" id=\"yearDateDiv\">\r\n                    <input type=\"text\" className=\"textBox yearDateTextBox\" id=\"startYearBox\" placeholder=\"Start Year (2019)\"\r\n                    value={startYearInitValue} onChange={() => this.apdateHomeValues()} />\r\n                    \r\n                    <input type=\"text\" className=\"textBox yearDateTextBox\" id=\"endYearBox\" placeholder=\"End Year (2020)\"\r\n                    value={endYearInitValue} onChange={() => this.apdateHomeValues()} />\r\n                    \r\n                    <input type=\"text\" className=\"textBox yearDateTextBox\" id=\"semesterBox\" placeholder=\"Semester (1 or 2)\"\r\n                    value={semesterInitValue} onChange={() => this.apdateHomeValues()} />\r\n                </div>\r\n                <br/>\r\n                <br/>\r\n                {curriculumText}\r\n                {bottomHalf}\r\n            </div>\r\n        );\r\n\r\n        const classDetails = {code: this.props.classCode, start: this.props.startYear, end: this.props.endYear, semester :this.props.semester};\r\n\r\n        let createCurriculumIframe = (\r\n                <CreateNewCurriculum classCode={this.props.classCode? this.props.classCode : \"Class Code Not Given\"}\r\n                changeToConfirm={this.changeToConfirm.bind(this)} classDetails={classDetails}/>\r\n        );\r\n\r\n        let loadOldCurriculumIframe = (\r\n            <div className=\"iframeContent\">\r\n                <LoadOldCurriculum classCode={this.props.classCode? this.props.classCode : \"Class Code Not Given\"}\r\n                changeToConfirm={this.changeToConfirm.bind(this)} classDetails={classDetails}/>\r\n            </div>\r\n        );\r\n        let iframeCurrentWindow = createClassHomeIframe;\r\n        if(this.state.iframeWindow === 1)\r\n            iframeCurrentWindow = createCurriculumIframe;\r\n        else if(this.state.iframeWindow === 2)\r\n            iframeCurrentWindow = loadOldCurriculumIframe;\r\n        return(\r\n            iframeCurrentWindow \r\n        )\r\n    }\r\n    /*\r\n    state.iframeWindow\r\n    0: main window\r\n    1: create curriculum\r\n    2: old curriculum\r\n    */\r\n    CreateCurriculum() {\r\n        this.setState({iframeWindow: 1});\r\n    }\r\n\r\n    LoadOldCurriculum() {\r\n        this.setState({iframeWindow: 2});\r\n    }\r\n\r\n    changeToConfirm(classDetails) {\r\n        this.setState({iframeWindow: 0, confirmScreen: true, classDetails: classDetails, classCode: classDetails.code,\r\n            startYear: classDetails.start, endYear: classDetails.end, semester: classDetails.semester});\r\n    }\r\n\r\n    cancelConfirm() {\r\n        this.setState({confirmScreen: false});\r\n    }\r\n\r\n    saveConfirm() {\r\n        alert(\"SAVE NOT IMPLEMENTED YET\");\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nexport default class CurrentClassIframe extends React.Component {\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <h1>Current Classes</h1>\r\n                <h2>Feature not yet installed</h2>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nexport default class PastClassIframe extends React.Component {\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <h1>Past Classes</h1>\r\n                <h2>Feature not yet installed</h2>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport './homeScreenStyles.css';\r\nimport CreateClassIframe from './iframe/createClassIframeComponents/CreateClassIframe.jsx';\r\nimport CurrentClassIframe from './iframe/currentClassIframeComponents/CurrentClassIframe.jsx';\r\nimport PastClassIframe from './iframe/pastClassIframeComponents/PastClassIframe.jsx';\r\n//import Button from '@material-ui/core/Button';\r\n\r\nexport default class HomeScreen extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            iframeButtonControl: null,\r\n            createClass_ClassCode: null,\r\n            createClass_startYear: null,\r\n            createClass_endYear: null,\r\n            createClass_semester: null,\r\n            createClass_curriculum: null,\r\n            createClass_taskList: null,\r\n            home: this,\r\n        }\r\n    }\r\n\r\n    buttonClicked(buttonNumber) {\r\n        let that = this;\r\n        //moves buttons and loads iframe\r\n        let buttonList = document.body.getElementsByClassName(\"homeButton\");\r\n        const destinationXpoint = window.innerWidth / 10;\r\n        \r\n        var id = setInterval(frame, 5);\r\n        function frame() {\r\n            let myFrame = document.body.getElementsByClassName(\"mainIframe\")[0];\r\n            for (let buttonIndex = 0; buttonIndex < buttonList.length; buttonIndex++) {\r\n                let button = buttonList[buttonIndex];\r\n                /***MOVES BUTTONS LEFT***/\r\n                if(button.getBoundingClientRect().x < destinationXpoint) {\r\n                    clearInterval(id);\r\n                } else {\r\n                    button.style.left = (button.getBoundingClientRect().x - 3).toString() + \"px\";\r\n                }\r\n                /***FADE IN IFRAME***/\r\n                let alpha = that.getAlpha(getComputedStyle(document.body.getElementsByClassName(\"mainIframe\")[0]).backgroundColor);\r\n                if(alpha < 1) {\r\n                    myFrame.style.backgroundColor = \"rgba(245,245,245,\"+((parseFloat(alpha) + 0.005).toString())+\")\";\r\n                    myFrame.style.color = \"rgba(0,0,0,\"+((parseFloat(alpha) + 0.005).toString())+\")\";\r\n                }\r\n            }\r\n        }\r\n        //loads iframe depends on what button was pressed\r\n        this.loadIframe(buttonNumber);\r\n    }\r\n\r\n    changeProps(prop, value) {\r\n        if(prop === \"classCode\") {\r\n            this.setState({createClass_ClassCode: value});\r\n        } else if(prop === \"startYear\") {\r\n            this.setState({createClass_startYear: value});\r\n        } else if(prop === \"endYear\") {\r\n            this.setState({createClass_endYear: value});\r\n        } else if(prop === \"semester\") {\r\n            this.setState({createClass_semester: value});\r\n        }\r\n    }\r\n\r\n    getAlpha(string) {\r\n        let split1 = null;\r\n        let split2 = null;\r\n        let split3 = null;\r\n        for (let i = 0; i < string.length; i++) {\r\n           if (string.substring(i, i+1) === ',') {\r\n              if (split1 === null) {\r\n                 split1 = i;\r\n              } else if(split2 === null) {\r\n                 split2 = i;\r\n              } else {//slpit 3\r\n                 split3 = i;\r\n                 break;\r\n              }\r\n           }\r\n        }\r\n        if(split3 === null){//rgb instead of rgba\r\n           return 1;\r\n        }\r\n        let alpha = null;\r\n        for (let i = split3; i < string.length; i++) {\r\n           if(string.substring(i, i+1) === ')') {\r\n              alpha = string.substring(split3+2, i);\r\n              break;\r\n           }\r\n        }\r\n        return parseFloat(alpha);\r\n     }\r\n\r\n     loadIframe(buttonNumber) {\r\n        this.setState({iframeButtonControl: buttonNumber});\r\n     }\r\n\r\n    render() {\r\n        let button0State = this.state.iframeButtonControl === 0? \"homeButton boldButton\" : \"homeButton unboldenButton\";\r\n        let button1State = this.state.iframeButtonControl === 1? \"homeButton boldButton\" : \"homeButton unboldenButton\";\r\n        let button2State = this.state.iframeButtonControl === 2? \"homeButton boldButton\" : \"homeButton unboldenButton\";\r\n        let iframeContent;\r\n        if(this.state.iframeButtonControl === 0) {\r\n            iframeContent = <CurrentClassIframe />\r\n        } else if (this.state.iframeButtonControl === 1) {\r\n            iframeContent = <CreateClassIframe\r\n                classCode={this.state.createClass_ClassCode}\r\n                startYear={this.state.createClass_startYear}\r\n                endYear={this.state.createClass_endYear}\r\n                semester={this.state.createClass_semester}\r\n                changeProps={this.changeProps.bind(this)}\r\n            />;\r\n        } else if (this.state.iframeButtonControl === 2) {\r\n            iframeContent = <PastClassIframe />;\r\n        }\r\n        \r\n        return (\r\n            <div>\r\n                <div className=\"mainIframe\">\r\n                    {iframeContent}\r\n                </div>\r\n                <input type=\"button\" className={button0State} value=\"Current Classes\"\r\n                style={{top: ((window.innerHeight / 4) - (window.innerHeight / 20)).toString() + \"px\"}}\r\n                onClick={() => this.buttonClicked(0)}/>\r\n                <input type=\"button\" className={button1State} value=\"Create Class\"\r\n                style={{top: ((window.innerHeight / 2) - (window.innerHeight / 20)).toString() + \"px\"}}\r\n                onClick={() => this.buttonClicked(1)}/>\r\n                <input type=\"button\" className={button2State} value=\"Past Classes\"\r\n                style={{top: ((window.innerHeight * 3/ 4) - (window.innerHeight / 20)).toString() + \"px\"}}\r\n                onClick={() => this.buttonClicked(2)}/>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport './App.css';\r\n//import {BrowserRouter as Router, Switch, Route, Link} from \"react-router-dom\";\r\nimport HomeScreen from './components/home/HomeScreen.jsx';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      {/*<p>hello darkness my old friend</p>\r\n      <Router>\r\n        <nav>\r\n          <ul>\r\n            <li>\r\n              <Link to=\"/about\">About</Link>\r\n            </li>\r\n          </ul>\r\n        </nav>\r\n        <Switch>\r\n          <Route path=\"/about\">\r\n            <HomeScreen />\r\n          </Route>\r\n        </Switch>\r\n      </Router>*/}\r\n      <HomeScreen />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}